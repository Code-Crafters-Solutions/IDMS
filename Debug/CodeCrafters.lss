
CodeCrafters.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d4  00800100  000038fc  00003990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008003d4  008003d4  00003c64  2**0
                  ALLOC
  3 .stab         00003534  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016df  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008877  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000089b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028e  00000000  00000000  0000c568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ef       	ldi	r30, 0xFC	; 252
      a0:	f8 e3       	ldi	r31, 0x38	; 56
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3d       	cpi	r26, 0xD4	; 212
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a4 ed       	ldi	r26, 0xD4	; 212
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3e       	cpi	r26, 0xE4	; 228
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <main>
      c6:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 67 03 	call	0x6ce	; 0x6ce <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a1 ed       	ldi	r26, 0xD1	; 209
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 1b 04 	call	0x836	; 0x836 <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 1b 04 	call	0x836	; 0x836 <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	81 ed       	ldi	r24, 0xD1	; 209
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 1b 04 	call	0x836	; 0x836 <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__>

0000066e <__gtsf2>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__+0x18>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	89 e0       	ldi	r24, 0x09	; 9
     68c:	e8 2e       	mov	r14, r24
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     6ae:	89 85       	ldd	r24, Y+9	; 0x09
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	40 f0       	brcs	.+16     	; 0x6c4 <__gtsf2+0x56>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	28 f0       	brcs	.+10     	; 0x6c4 <__gtsf2+0x56>
     6ba:	c7 01       	movw	r24, r14
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 68 05 	call	0xad0	; 0xad0 <__fpcmp_parts_f>
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <__gtsf2+0x58>
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	68 96       	adiw	r28, 0x18	; 24
     6c8:	e6 e0       	ldi	r30, 0x06	; 6
     6ca:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__+0x18>

000006ce <__gesf2>:
     6ce:	a8 e1       	ldi	r26, 0x18	; 24
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	ed e6       	ldi	r30, 0x6D	; 109
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__+0x18>
     6da:	69 83       	std	Y+1, r22	; 0x01
     6dc:	7a 83       	std	Y+2, r23	; 0x02
     6de:	8b 83       	std	Y+3, r24	; 0x03
     6e0:	9c 83       	std	Y+4, r25	; 0x04
     6e2:	2d 83       	std	Y+5, r18	; 0x05
     6e4:	3e 83       	std	Y+6, r19	; 0x06
     6e6:	4f 83       	std	Y+7, r20	; 0x07
     6e8:	58 87       	std	Y+8, r21	; 0x08
     6ea:	89 e0       	ldi	r24, 0x09	; 9
     6ec:	e8 2e       	mov	r14, r24
     6ee:	f1 2c       	mov	r15, r1
     6f0:	ec 0e       	add	r14, r28
     6f2:	fd 1e       	adc	r15, r29
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	b7 01       	movw	r22, r14
     6fa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     6fe:	8e 01       	movw	r16, r28
     700:	0f 5e       	subi	r16, 0xEF	; 239
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	ce 01       	movw	r24, r28
     706:	05 96       	adiw	r24, 0x05	; 5
     708:	b8 01       	movw	r22, r16
     70a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     70e:	89 85       	ldd	r24, Y+9	; 0x09
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	40 f0       	brcs	.+16     	; 0x724 <__gesf2+0x56>
     714:	89 89       	ldd	r24, Y+17	; 0x11
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	28 f0       	brcs	.+10     	; 0x724 <__gesf2+0x56>
     71a:	c7 01       	movw	r24, r14
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 68 05 	call	0xad0	; 0xad0 <__fpcmp_parts_f>
     722:	01 c0       	rjmp	.+2      	; 0x726 <__gesf2+0x58>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	68 96       	adiw	r28, 0x18	; 24
     728:	e6 e0       	ldi	r30, 0x06	; 6
     72a:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__+0x18>

0000072e <__ltsf2>:
     72e:	a8 e1       	ldi	r26, 0x18	; 24
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	ed e9       	ldi	r30, 0x9D	; 157
     734:	f3 e0       	ldi	r31, 0x03	; 3
     736:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__+0x18>
     73a:	69 83       	std	Y+1, r22	; 0x01
     73c:	7a 83       	std	Y+2, r23	; 0x02
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	2d 83       	std	Y+5, r18	; 0x05
     744:	3e 83       	std	Y+6, r19	; 0x06
     746:	4f 83       	std	Y+7, r20	; 0x07
     748:	58 87       	std	Y+8, r21	; 0x08
     74a:	89 e0       	ldi	r24, 0x09	; 9
     74c:	e8 2e       	mov	r14, r24
     74e:	f1 2c       	mov	r15, r1
     750:	ec 0e       	add	r14, r28
     752:	fd 1e       	adc	r15, r29
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	b7 01       	movw	r22, r14
     75a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     75e:	8e 01       	movw	r16, r28
     760:	0f 5e       	subi	r16, 0xEF	; 239
     762:	1f 4f       	sbci	r17, 0xFF	; 255
     764:	ce 01       	movw	r24, r28
     766:	05 96       	adiw	r24, 0x05	; 5
     768:	b8 01       	movw	r22, r16
     76a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	40 f0       	brcs	.+16     	; 0x784 <__ltsf2+0x56>
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	28 f0       	brcs	.+10     	; 0x784 <__ltsf2+0x56>
     77a:	c7 01       	movw	r24, r14
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 68 05 	call	0xad0	; 0xad0 <__fpcmp_parts_f>
     782:	01 c0       	rjmp	.+2      	; 0x786 <__ltsf2+0x58>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	68 96       	adiw	r28, 0x18	; 24
     788:	e6 e0       	ldi	r30, 0x06	; 6
     78a:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__+0x18>

0000078e <__fixsfsi>:
     78e:	ac e0       	ldi	r26, 0x0C	; 12
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ed ec       	ldi	r30, 0xCD	; 205
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__prologue_saves__+0x20>
     79a:	69 83       	std	Y+1, r22	; 0x01
     79c:	7a 83       	std	Y+2, r23	; 0x02
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	be 01       	movw	r22, r28
     7a8:	6b 5f       	subi	r22, 0xFB	; 251
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__unpack_f>
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	61 f1       	breq	.+88     	; 0x80e <__fixsfsi+0x80>
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	50 f1       	brcs	.+84     	; 0x80e <__fixsfsi+0x80>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <__fixsfsi+0x38>
     7be:	8e 81       	ldd	r24, Y+6	; 0x06
     7c0:	88 23       	and	r24, r24
     7c2:	51 f1       	breq	.+84     	; 0x818 <__fixsfsi+0x8a>
     7c4:	2e c0       	rjmp	.+92     	; 0x822 <__fixsfsi+0x94>
     7c6:	2f 81       	ldd	r18, Y+7	; 0x07
     7c8:	38 85       	ldd	r19, Y+8	; 0x08
     7ca:	37 fd       	sbrc	r19, 7
     7cc:	20 c0       	rjmp	.+64     	; 0x80e <__fixsfsi+0x80>
     7ce:	6e 81       	ldd	r22, Y+6	; 0x06
     7d0:	2f 31       	cpi	r18, 0x1F	; 31
     7d2:	31 05       	cpc	r19, r1
     7d4:	1c f0       	brlt	.+6      	; 0x7dc <__fixsfsi+0x4e>
     7d6:	66 23       	and	r22, r22
     7d8:	f9 f0       	breq	.+62     	; 0x818 <__fixsfsi+0x8a>
     7da:	23 c0       	rjmp	.+70     	; 0x822 <__fixsfsi+0x94>
     7dc:	8e e1       	ldi	r24, 0x1E	; 30
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	82 1b       	sub	r24, r18
     7e2:	93 0b       	sbc	r25, r19
     7e4:	29 85       	ldd	r18, Y+9	; 0x09
     7e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__fixsfsi+0x68>
     7ee:	56 95       	lsr	r21
     7f0:	47 95       	ror	r20
     7f2:	37 95       	ror	r19
     7f4:	27 95       	ror	r18
     7f6:	8a 95       	dec	r24
     7f8:	d2 f7       	brpl	.-12     	; 0x7ee <__fixsfsi+0x60>
     7fa:	66 23       	and	r22, r22
     7fc:	b1 f0       	breq	.+44     	; 0x82a <__fixsfsi+0x9c>
     7fe:	50 95       	com	r21
     800:	40 95       	com	r20
     802:	30 95       	com	r19
     804:	21 95       	neg	r18
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	4f 4f       	sbci	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	0e c0       	rjmp	.+28     	; 0x82a <__fixsfsi+0x9c>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	09 c0       	rjmp	.+18     	; 0x82a <__fixsfsi+0x9c>
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	4f ef       	ldi	r20, 0xFF	; 255
     81e:	5f e7       	ldi	r21, 0x7F	; 127
     820:	04 c0       	rjmp	.+8      	; 0x82a <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e8       	ldi	r21, 0x80	; 128
     82a:	b9 01       	movw	r22, r18
     82c:	ca 01       	movw	r24, r20
     82e:	2c 96       	adiw	r28, 0x0c	; 12
     830:	e2 e0       	ldi	r30, 0x02	; 2
     832:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__epilogue_restores__+0x20>

00000836 <__pack_f>:
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	fc 01       	movw	r30, r24
     842:	e4 80       	ldd	r14, Z+4	; 0x04
     844:	f5 80       	ldd	r15, Z+5	; 0x05
     846:	06 81       	ldd	r16, Z+6	; 0x06
     848:	17 81       	ldd	r17, Z+7	; 0x07
     84a:	d1 80       	ldd	r13, Z+1	; 0x01
     84c:	80 81       	ld	r24, Z
     84e:	82 30       	cpi	r24, 0x02	; 2
     850:	48 f4       	brcc	.+18     	; 0x864 <__pack_f+0x2e>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e1       	ldi	r26, 0x10	; 16
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e8 2a       	or	r14, r24
     85c:	f9 2a       	or	r15, r25
     85e:	0a 2b       	or	r16, r26
     860:	1b 2b       	or	r17, r27
     862:	a5 c0       	rjmp	.+330    	; 0x9ae <__pack_f+0x178>
     864:	84 30       	cpi	r24, 0x04	; 4
     866:	09 f4       	brne	.+2      	; 0x86a <__pack_f+0x34>
     868:	9f c0       	rjmp	.+318    	; 0x9a8 <__pack_f+0x172>
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__pack_f+0x40>
     86e:	ee 24       	eor	r14, r14
     870:	ff 24       	eor	r15, r15
     872:	87 01       	movw	r16, r14
     874:	05 c0       	rjmp	.+10     	; 0x880 <__pack_f+0x4a>
     876:	e1 14       	cp	r14, r1
     878:	f1 04       	cpc	r15, r1
     87a:	01 05       	cpc	r16, r1
     87c:	11 05       	cpc	r17, r1
     87e:	19 f4       	brne	.+6      	; 0x886 <__pack_f+0x50>
     880:	e0 e0       	ldi	r30, 0x00	; 0
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	96 c0       	rjmp	.+300    	; 0x9b2 <__pack_f+0x17c>
     886:	62 81       	ldd	r22, Z+2	; 0x02
     888:	73 81       	ldd	r23, Z+3	; 0x03
     88a:	9f ef       	ldi	r25, 0xFF	; 255
     88c:	62 38       	cpi	r22, 0x82	; 130
     88e:	79 07       	cpc	r23, r25
     890:	0c f0       	brlt	.+2      	; 0x894 <__pack_f+0x5e>
     892:	5b c0       	rjmp	.+182    	; 0x94a <__pack_f+0x114>
     894:	22 e8       	ldi	r18, 0x82	; 130
     896:	3f ef       	ldi	r19, 0xFF	; 255
     898:	26 1b       	sub	r18, r22
     89a:	37 0b       	sbc	r19, r23
     89c:	2a 31       	cpi	r18, 0x1A	; 26
     89e:	31 05       	cpc	r19, r1
     8a0:	2c f0       	brlt	.+10     	; 0x8ac <__pack_f+0x76>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	2a c0       	rjmp	.+84     	; 0x900 <__pack_f+0xca>
     8ac:	b8 01       	movw	r22, r16
     8ae:	a7 01       	movw	r20, r14
     8b0:	02 2e       	mov	r0, r18
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__pack_f+0x86>
     8b4:	76 95       	lsr	r23
     8b6:	67 95       	ror	r22
     8b8:	57 95       	ror	r21
     8ba:	47 95       	ror	r20
     8bc:	0a 94       	dec	r0
     8be:	d2 f7       	brpl	.-12     	; 0x8b4 <__pack_f+0x7e>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__pack_f+0x9c>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	2a 95       	dec	r18
     8d4:	d2 f7       	brpl	.-12     	; 0x8ca <__pack_f+0x94>
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	a1 09       	sbc	r26, r1
     8da:	b1 09       	sbc	r27, r1
     8dc:	8e 21       	and	r24, r14
     8de:	9f 21       	and	r25, r15
     8e0:	a0 23       	and	r26, r16
     8e2:	b1 23       	and	r27, r17
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	a1 05       	cpc	r26, r1
     8e8:	b1 05       	cpc	r27, r1
     8ea:	21 f0       	breq	.+8      	; 0x8f4 <__pack_f+0xbe>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	9a 01       	movw	r18, r20
     8f6:	ab 01       	movw	r20, r22
     8f8:	28 2b       	or	r18, r24
     8fa:	39 2b       	or	r19, r25
     8fc:	4a 2b       	or	r20, r26
     8fe:	5b 2b       	or	r21, r27
     900:	da 01       	movw	r26, r20
     902:	c9 01       	movw	r24, r18
     904:	8f 77       	andi	r24, 0x7F	; 127
     906:	90 70       	andi	r25, 0x00	; 0
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	80 34       	cpi	r24, 0x40	; 64
     90e:	91 05       	cpc	r25, r1
     910:	a1 05       	cpc	r26, r1
     912:	b1 05       	cpc	r27, r1
     914:	39 f4       	brne	.+14     	; 0x924 <__pack_f+0xee>
     916:	27 ff       	sbrs	r18, 7
     918:	09 c0       	rjmp	.+18     	; 0x92c <__pack_f+0xf6>
     91a:	20 5c       	subi	r18, 0xC0	; 192
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	4f 4f       	sbci	r20, 0xFF	; 255
     920:	5f 4f       	sbci	r21, 0xFF	; 255
     922:	04 c0       	rjmp	.+8      	; 0x92c <__pack_f+0xf6>
     924:	21 5c       	subi	r18, 0xC1	; 193
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	4f 4f       	sbci	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	20 30       	cpi	r18, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	3a 07       	cpc	r19, r26
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	4a 07       	cpc	r20, r26
     93a:	a0 e4       	ldi	r26, 0x40	; 64
     93c:	5a 07       	cpc	r21, r26
     93e:	10 f0       	brcs	.+4      	; 0x944 <__pack_f+0x10e>
     940:	e1 e0       	ldi	r30, 0x01	; 1
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	79 01       	movw	r14, r18
     946:	8a 01       	movw	r16, r20
     948:	27 c0       	rjmp	.+78     	; 0x998 <__pack_f+0x162>
     94a:	60 38       	cpi	r22, 0x80	; 128
     94c:	71 05       	cpc	r23, r1
     94e:	64 f5       	brge	.+88     	; 0x9a8 <__pack_f+0x172>
     950:	fb 01       	movw	r30, r22
     952:	e1 58       	subi	r30, 0x81	; 129
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	d8 01       	movw	r26, r16
     958:	c7 01       	movw	r24, r14
     95a:	8f 77       	andi	r24, 0x7F	; 127
     95c:	90 70       	andi	r25, 0x00	; 0
     95e:	a0 70       	andi	r26, 0x00	; 0
     960:	b0 70       	andi	r27, 0x00	; 0
     962:	80 34       	cpi	r24, 0x40	; 64
     964:	91 05       	cpc	r25, r1
     966:	a1 05       	cpc	r26, r1
     968:	b1 05       	cpc	r27, r1
     96a:	39 f4       	brne	.+14     	; 0x97a <__pack_f+0x144>
     96c:	e7 fe       	sbrs	r14, 7
     96e:	0d c0       	rjmp	.+26     	; 0x98a <__pack_f+0x154>
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__pack_f+0x14c>
     97a:	8f e3       	ldi	r24, 0x3F	; 63
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e8 0e       	add	r14, r24
     984:	f9 1e       	adc	r15, r25
     986:	0a 1f       	adc	r16, r26
     988:	1b 1f       	adc	r17, r27
     98a:	17 ff       	sbrs	r17, 7
     98c:	05 c0       	rjmp	.+10     	; 0x998 <__pack_f+0x162>
     98e:	16 95       	lsr	r17
     990:	07 95       	ror	r16
     992:	f7 94       	ror	r15
     994:	e7 94       	ror	r14
     996:	31 96       	adiw	r30, 0x01	; 1
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	16 95       	lsr	r17
     99c:	07 95       	ror	r16
     99e:	f7 94       	ror	r15
     9a0:	e7 94       	ror	r14
     9a2:	8a 95       	dec	r24
     9a4:	d1 f7       	brne	.-12     	; 0x99a <__pack_f+0x164>
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__pack_f+0x17c>
     9a8:	ee 24       	eor	r14, r14
     9aa:	ff 24       	eor	r15, r15
     9ac:	87 01       	movw	r16, r14
     9ae:	ef ef       	ldi	r30, 0xFF	; 255
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	6e 2f       	mov	r22, r30
     9b4:	67 95       	ror	r22
     9b6:	66 27       	eor	r22, r22
     9b8:	67 95       	ror	r22
     9ba:	90 2f       	mov	r25, r16
     9bc:	9f 77       	andi	r25, 0x7F	; 127
     9be:	d7 94       	ror	r13
     9c0:	dd 24       	eor	r13, r13
     9c2:	d7 94       	ror	r13
     9c4:	8e 2f       	mov	r24, r30
     9c6:	86 95       	lsr	r24
     9c8:	49 2f       	mov	r20, r25
     9ca:	46 2b       	or	r20, r22
     9cc:	58 2f       	mov	r21, r24
     9ce:	5d 29       	or	r21, r13
     9d0:	b7 01       	movw	r22, r14
     9d2:	ca 01       	movw	r24, r20
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	08 95       	ret

000009e0 <__unpack_f>:
     9e0:	fc 01       	movw	r30, r24
     9e2:	db 01       	movw	r26, r22
     9e4:	40 81       	ld	r20, Z
     9e6:	51 81       	ldd	r21, Z+1	; 0x01
     9e8:	22 81       	ldd	r18, Z+2	; 0x02
     9ea:	62 2f       	mov	r22, r18
     9ec:	6f 77       	andi	r22, 0x7F	; 127
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	22 1f       	adc	r18, r18
     9f2:	22 27       	eor	r18, r18
     9f4:	22 1f       	adc	r18, r18
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	89 2f       	mov	r24, r25
     9fa:	88 0f       	add	r24, r24
     9fc:	82 2b       	or	r24, r18
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	99 1f       	adc	r25, r25
     a04:	99 27       	eor	r25, r25
     a06:	99 1f       	adc	r25, r25
     a08:	11 96       	adiw	r26, 0x01	; 1
     a0a:	9c 93       	st	X, r25
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	a9 f5       	brne	.+106    	; 0xa7e <__unpack_f+0x9e>
     a14:	41 15       	cp	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	61 05       	cpc	r22, r1
     a1a:	71 05       	cpc	r23, r1
     a1c:	11 f4       	brne	.+4      	; 0xa22 <__unpack_f+0x42>
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	37 c0       	rjmp	.+110    	; 0xa90 <__unpack_f+0xb0>
     a22:	82 e8       	ldi	r24, 0x82	; 130
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	13 96       	adiw	r26, 0x03	; 3
     a28:	9c 93       	st	X, r25
     a2a:	8e 93       	st	-X, r24
     a2c:	12 97       	sbiw	r26, 0x02	; 2
     a2e:	9a 01       	movw	r18, r20
     a30:	ab 01       	movw	r20, r22
     a32:	67 e0       	ldi	r22, 0x07	; 7
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	44 1f       	adc	r20, r20
     a3a:	55 1f       	adc	r21, r21
     a3c:	6a 95       	dec	r22
     a3e:	d1 f7       	brne	.-12     	; 0xa34 <__unpack_f+0x54>
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	8c 93       	st	X, r24
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <__unpack_f+0x80>
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	44 1f       	adc	r20, r20
     a4c:	55 1f       	adc	r21, r21
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8d 91       	ld	r24, X+
     a52:	9c 91       	ld	r25, X
     a54:	13 97       	sbiw	r26, 0x03	; 3
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	13 96       	adiw	r26, 0x03	; 3
     a5a:	9c 93       	st	X, r25
     a5c:	8e 93       	st	-X, r24
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	20 30       	cpi	r18, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	38 07       	cpc	r19, r24
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	48 07       	cpc	r20, r24
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	58 07       	cpc	r21, r24
     a6e:	58 f3       	brcs	.-42     	; 0xa46 <__unpack_f+0x66>
     a70:	14 96       	adiw	r26, 0x04	; 4
     a72:	2d 93       	st	X+, r18
     a74:	3d 93       	st	X+, r19
     a76:	4d 93       	st	X+, r20
     a78:	5c 93       	st	X, r21
     a7a:	17 97       	sbiw	r26, 0x07	; 7
     a7c:	08 95       	ret
     a7e:	2f 3f       	cpi	r18, 0xFF	; 255
     a80:	31 05       	cpc	r19, r1
     a82:	79 f4       	brne	.+30     	; 0xaa2 <__unpack_f+0xc2>
     a84:	41 15       	cp	r20, r1
     a86:	51 05       	cpc	r21, r1
     a88:	61 05       	cpc	r22, r1
     a8a:	71 05       	cpc	r23, r1
     a8c:	19 f4       	brne	.+6      	; 0xa94 <__unpack_f+0xb4>
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	8c 93       	st	X, r24
     a92:	08 95       	ret
     a94:	64 ff       	sbrs	r22, 4
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <__unpack_f+0xbe>
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	8c 93       	st	X, r24
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__unpack_f+0xe2>
     a9e:	1c 92       	st	X, r1
     aa0:	10 c0       	rjmp	.+32     	; 0xac2 <__unpack_f+0xe2>
     aa2:	2f 57       	subi	r18, 0x7F	; 127
     aa4:	30 40       	sbci	r19, 0x00	; 0
     aa6:	13 96       	adiw	r26, 0x03	; 3
     aa8:	3c 93       	st	X, r19
     aaa:	2e 93       	st	-X, r18
     aac:	12 97       	sbiw	r26, 0x02	; 2
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	8c 93       	st	X, r24
     ab2:	87 e0       	ldi	r24, 0x07	; 7
     ab4:	44 0f       	add	r20, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	66 1f       	adc	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	8a 95       	dec	r24
     abe:	d1 f7       	brne	.-12     	; 0xab4 <__unpack_f+0xd4>
     ac0:	70 64       	ori	r23, 0x40	; 64
     ac2:	14 96       	adiw	r26, 0x04	; 4
     ac4:	4d 93       	st	X+, r20
     ac6:	5d 93       	st	X+, r21
     ac8:	6d 93       	st	X+, r22
     aca:	7c 93       	st	X, r23
     acc:	17 97       	sbiw	r26, 0x07	; 7
     ace:	08 95       	ret

00000ad0 <__fpcmp_parts_f>:
     ad0:	1f 93       	push	r17
     ad2:	dc 01       	movw	r26, r24
     ad4:	fb 01       	movw	r30, r22
     ad6:	9c 91       	ld	r25, X
     ad8:	92 30       	cpi	r25, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0xe>
     adc:	47 c0       	rjmp	.+142    	; 0xb6c <__fpcmp_parts_f+0x9c>
     ade:	80 81       	ld	r24, Z
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <__fpcmp_parts_f+0x16>
     ae4:	43 c0       	rjmp	.+134    	; 0xb6c <__fpcmp_parts_f+0x9c>
     ae6:	94 30       	cpi	r25, 0x04	; 4
     ae8:	51 f4       	brne	.+20     	; 0xafe <__fpcmp_parts_f+0x2e>
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	1c 91       	ld	r17, X
     aee:	84 30       	cpi	r24, 0x04	; 4
     af0:	99 f5       	brne	.+102    	; 0xb58 <__fpcmp_parts_f+0x88>
     af2:	81 81       	ldd	r24, Z+1	; 0x01
     af4:	68 2f       	mov	r22, r24
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	61 1b       	sub	r22, r17
     afa:	71 09       	sbc	r23, r1
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <__fpcmp_parts_f+0xac>
     afe:	84 30       	cpi	r24, 0x04	; 4
     b00:	21 f0       	breq	.+8      	; 0xb0a <__fpcmp_parts_f+0x3a>
     b02:	92 30       	cpi	r25, 0x02	; 2
     b04:	31 f4       	brne	.+12     	; 0xb12 <__fpcmp_parts_f+0x42>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	b9 f1       	breq	.+110    	; 0xb78 <__fpcmp_parts_f+0xa8>
     b0a:	81 81       	ldd	r24, Z+1	; 0x01
     b0c:	88 23       	and	r24, r24
     b0e:	89 f1       	breq	.+98     	; 0xb72 <__fpcmp_parts_f+0xa2>
     b10:	2d c0       	rjmp	.+90     	; 0xb6c <__fpcmp_parts_f+0x9c>
     b12:	11 96       	adiw	r26, 0x01	; 1
     b14:	1c 91       	ld	r17, X
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	f1 f0       	breq	.+60     	; 0xb58 <__fpcmp_parts_f+0x88>
     b1c:	81 81       	ldd	r24, Z+1	; 0x01
     b1e:	18 17       	cp	r17, r24
     b20:	d9 f4       	brne	.+54     	; 0xb58 <__fpcmp_parts_f+0x88>
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	2d 91       	ld	r18, X+
     b26:	3c 91       	ld	r19, X
     b28:	13 97       	sbiw	r26, 0x03	; 3
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	94 f0       	brlt	.+36     	; 0xb58 <__fpcmp_parts_f+0x88>
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	bc f0       	brlt	.+46     	; 0xb68 <__fpcmp_parts_f+0x98>
     b3a:	14 96       	adiw	r26, 0x04	; 4
     b3c:	8d 91       	ld	r24, X+
     b3e:	9d 91       	ld	r25, X+
     b40:	0d 90       	ld	r0, X+
     b42:	bc 91       	ld	r27, X
     b44:	a0 2d       	mov	r26, r0
     b46:	24 81       	ldd	r18, Z+4	; 0x04
     b48:	35 81       	ldd	r19, Z+5	; 0x05
     b4a:	46 81       	ldd	r20, Z+6	; 0x06
     b4c:	57 81       	ldd	r21, Z+7	; 0x07
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	4a 07       	cpc	r20, r26
     b54:	5b 07       	cpc	r21, r27
     b56:	18 f4       	brcc	.+6      	; 0xb5e <__fpcmp_parts_f+0x8e>
     b58:	11 23       	and	r17, r17
     b5a:	41 f0       	breq	.+16     	; 0xb6c <__fpcmp_parts_f+0x9c>
     b5c:	0a c0       	rjmp	.+20     	; 0xb72 <__fpcmp_parts_f+0xa2>
     b5e:	82 17       	cp	r24, r18
     b60:	93 07       	cpc	r25, r19
     b62:	a4 07       	cpc	r26, r20
     b64:	b5 07       	cpc	r27, r21
     b66:	40 f4       	brcc	.+16     	; 0xb78 <__fpcmp_parts_f+0xa8>
     b68:	11 23       	and	r17, r17
     b6a:	19 f0       	breq	.+6      	; 0xb72 <__fpcmp_parts_f+0xa2>
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <__fpcmp_parts_f+0xac>
     b72:	6f ef       	ldi	r22, 0xFF	; 255
     b74:	7f ef       	ldi	r23, 0xFF	; 255
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <__fpcmp_parts_f+0xac>
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	cb 01       	movw	r24, r22
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <DIO_INIT>:
#include "DIO_Interface.h"
#include "DIO_Registers.h"
#include "DIO_Config.h"

void DIO_INIT(void)
{
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = Conc(DIO_PORTA_PIN7_INIT_DIR,DIO_PORTA_PIN6_INIT_DIR,DIO_PORTA_PIN5_INIT_DIR,
     b8a:	ea e3       	ldi	r30, 0x3A	; 58
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	10 82       	st	Z, r1
					DIO_PORTA_PIN4_INIT_DIR,DIO_PORTA_PIN3_INIT_DIR,DIO_PORTA_PIN2_INIT_DIR,
					DIO_PORTA_PIN1_INIT_DIR,DIO_PORTA_PIN0_INIT_DIR);
	DDRB_REG = Conc(DIO_PORTB_PIN7_INIT_DIR,DIO_PORTB_PIN6_INIT_DIR,DIO_PORTB_PIN5_INIT_DIR,
     b90:	e7 e3       	ldi	r30, 0x37	; 55
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	10 82       	st	Z, r1
					DIO_PORTB_PIN4_INIT_DIR,DIO_PORTB_PIN3_INIT_DIR,DIO_PORTB_PIN2_INIT_DIR,
					DIO_PORTB_PIN1_INIT_DIR,DIO_PORTB_PIN0_INIT_DIR);
	DDRC_REG = Conc(DIO_PORTC_PIN7_INIT_DIR,DIO_PORTC_PIN6_INIT_DIR,DIO_PORTC_PIN5_INIT_DIR,
     b96:	e4 e3       	ldi	r30, 0x34	; 52
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	10 82       	st	Z, r1
					DIO_PORTC_PIN4_INIT_DIR,DIO_PORTC_PIN3_INIT_DIR,DIO_PORTC_PIN2_INIT_DIR,
					DIO_PORTC_PIN1_INIT_DIR,DIO_PORTC_PIN0_INIT_DIR);
	DDRD_REG = Conc(DIO_PORTD_PIN7_INIT_DIR,DIO_PORTD_PIN6_INIT_DIR,DIO_PORTD_PIN5_INIT_DIR,
     b9c:	e1 e3       	ldi	r30, 0x31	; 49
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	10 82       	st	Z, r1
					DIO_PORTD_PIN4_INIT_DIR,DIO_PORTD_PIN3_INIT_DIR,DIO_PORTD_PIN2_INIT_DIR,
					DIO_PORTD_PIN1_INIT_DIR,DIO_PORTD_PIN0_INIT_DIR);
	DDRE_REG = Conc(DIO_PORTE_PIN7_INIT_DIR,DIO_PORTE_PIN6_INIT_DIR,DIO_PORTE_PIN5_INIT_DIR,
     ba2:	e2 e2       	ldi	r30, 0x22	; 34
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	82 e2       	ldi	r24, 0x22	; 34
     ba8:	80 83       	st	Z, r24
					DIO_PORTE_PIN4_INIT_DIR,DIO_PORTE_PIN3_INIT_DIR,DIO_PORTE_PIN2_INIT_DIR,
					DIO_PORTE_PIN1_INIT_DIR,DIO_PORTE_PIN0_INIT_DIR);
	DDRF_REG = Conc(DIO_PORTF_PIN7_INIT_DIR,DIO_PORTF_PIN6_INIT_DIR,DIO_PORTF_PIN5_INIT_DIR,
     baa:	e1 e6       	ldi	r30, 0x61	; 97
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	10 82       	st	Z, r1
					DIO_PORTF_PIN4_INIT_DIR,DIO_PORTF_PIN3_INIT_DIR,DIO_PORTF_PIN2_INIT_DIR,
					DIO_PORTF_PIN1_INIT_DIR,DIO_PORTF_PIN0_INIT_DIR);
	DDRG_REG = Conc(0,0,0,DIO_PORTG_PIN4_INIT_DIR,
     bb0:	e4 e6       	ldi	r30, 0x64	; 100
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	10 82       	st	Z, r1
					DIO_PORTG_PIN3_INIT_DIR,DIO_PORTG_PIN2_INIT_DIR,
					DIO_PORTG_PIN1_INIT_DIR,DIO_PORTG_PIN0_INIT_DIR);

	PORTA_REG = Conc(DIO_PORTA_PIN7_INIT_Val,DIO_PORTA_PIN6_INIT_Val,DIO_PORTA_PIN5_INIT_Val,
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	10 82       	st	Z, r1
					DIO_PORTA_PIN4_INIT_Val,DIO_PORTA_PIN3_INIT_Val,DIO_PORTA_PIN2_INIT_Val,
					DIO_PORTA_PIN1_INIT_Val,DIO_PORTA_PIN0_INIT_Val);
	PORTB_REG = Conc(DIO_PORTB_PIN7_INIT_Val,DIO_PORTB_PIN6_INIT_Val,DIO_PORTB_PIN5_INIT_Val,
     bbc:	e8 e3       	ldi	r30, 0x38	; 56
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	10 82       	st	Z, r1
					DIO_PORTB_PIN4_INIT_Val,DIO_PORTB_PIN3_INIT_Val,DIO_PORTB_PIN2_INIT_Val,
					DIO_PORTB_PIN1_INIT_Val,DIO_PORTB_PIN0_INIT_Val);
	PORTC_REG = Conc(DIO_PORTC_PIN7_INIT_Val,DIO_PORTC_PIN6_INIT_Val,DIO_PORTC_PIN5_INIT_Val,
     bc2:	e5 e3       	ldi	r30, 0x35	; 53
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	10 82       	st	Z, r1
					 DIO_PORTC_PIN4_INIT_Val,DIO_PORTC_PIN3_INIT_Val,DIO_PORTC_PIN2_INIT_Val,
					 DIO_PORTC_PIN1_INIT_Val,DIO_PORTC_PIN0_INIT_Val);
	PORTD_REG = Conc(DIO_PORTD_PIN7_INIT_Val,DIO_PORTD_PIN6_INIT_Val,DIO_PORTD_PIN5_INIT_Val,
     bc8:	e2 e3       	ldi	r30, 0x32	; 50
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	10 82       	st	Z, r1
					 DIO_PORTD_PIN4_INIT_Val,DIO_PORTD_PIN3_INIT_Val,DIO_PORTD_PIN2_INIT_Val,
					 DIO_PORTD_PIN1_INIT_Val,DIO_PORTD_PIN0_INIT_Val);
	PORTE_REG = Conc(DIO_PORTE_PIN7_INIT_Val,DIO_PORTE_PIN6_INIT_Val,DIO_PORTE_PIN5_INIT_Val,
     bce:	e3 e2       	ldi	r30, 0x23	; 35
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 e2       	ldi	r24, 0x20	; 32
     bd4:	80 83       	st	Z, r24
					 DIO_PORTE_PIN4_INIT_Val,DIO_PORTE_PIN3_INIT_Val,DIO_PORTE_PIN2_INIT_Val,
					 DIO_PORTE_PIN1_INIT_Val,DIO_PORTE_PIN0_INIT_Val);
	PORTF_REG = Conc(DIO_PORTF_PIN7_INIT_Val,DIO_PORTF_PIN6_INIT_Val,DIO_PORTF_PIN5_INIT_Val,
     bd6:	e2 e6       	ldi	r30, 0x62	; 98
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1
					 DIO_PORTF_PIN4_INIT_Val,DIO_PORTF_PIN3_INIT_Val,DIO_PORTF_PIN2_INIT_Val,
					 DIO_PORTF_PIN1_INIT_Val,DIO_PORTF_PIN0_INIT_Val);
	PORTG_REG = Conc(0,0,0,DIO_PORTG_PIN4_INIT_Val,
     bdc:	e5 e6       	ldi	r30, 0x65	; 101
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	10 82       	st	Z, r1
					 DIO_PORTG_PIN3_INIT_Val,DIO_PORTG_PIN2_INIT_Val,
					 DIO_PORTG_PIN1_INIT_Val,DIO_PORTG_PIN0_INIT_Val);

}
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <DIO_SetPinDirection>:

u8 DIO_SetPinDirection(u8 Port_ID,u8 Pin_ID,u8 Pin_Dir)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	28 97       	sbiw	r28, 0x08	; 8
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	8a 83       	std	Y+2, r24	; 0x02
     bfe:	6b 83       	std	Y+3, r22	; 0x03
     c00:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
     c02:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	08 f0       	brcs	.+2      	; 0xc0c <DIO_SetPinDirection+0x24>
     c0a:	96 c1       	rjmp	.+812    	; 0xf38 <DIO_SetPinDirection+0x350>
	{
		if(Pin_Dir == OUTPUT)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	09 f0       	breq	.+2      	; 0xc14 <DIO_SetPinDirection+0x2c>
     c12:	c2 c0       	rjmp	.+388    	; 0xd98 <DIO_SetPinDirection+0x1b0>
		{
			switch(Port_ID)
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	38 87       	std	Y+8, r19	; 0x08
     c1c:	2f 83       	std	Y+7, r18	; 0x07
     c1e:	8f 81       	ldd	r24, Y+7	; 0x07
     c20:	98 85       	ldd	r25, Y+8	; 0x08
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <DIO_SetPinDirection+0x42>
     c28:	64 c0       	rjmp	.+200    	; 0xcf2 <DIO_SetPinDirection+0x10a>
     c2a:	2f 81       	ldd	r18, Y+7	; 0x07
     c2c:	38 85       	ldd	r19, Y+8	; 0x08
     c2e:	24 30       	cpi	r18, 0x04	; 4
     c30:	31 05       	cpc	r19, r1
     c32:	84 f4       	brge	.+32     	; 0xc54 <DIO_SetPinDirection+0x6c>
     c34:	8f 81       	ldd	r24, Y+7	; 0x07
     c36:	98 85       	ldd	r25, Y+8	; 0x08
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	91 05       	cpc	r25, r1
     c3c:	91 f1       	breq	.+100    	; 0xca2 <DIO_SetPinDirection+0xba>
     c3e:	2f 81       	ldd	r18, Y+7	; 0x07
     c40:	38 85       	ldd	r19, Y+8	; 0x08
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	0c f0       	brlt	.+2      	; 0xc4a <DIO_SetPinDirection+0x62>
     c48:	40 c0       	rjmp	.+128    	; 0xcca <DIO_SetPinDirection+0xe2>
     c4a:	8f 81       	ldd	r24, Y+7	; 0x07
     c4c:	98 85       	ldd	r25, Y+8	; 0x08
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	a1 f0       	breq	.+40     	; 0xc7a <DIO_SetPinDirection+0x92>
     c52:	9f c0       	rjmp	.+318    	; 0xd92 <DIO_SetPinDirection+0x1aa>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	25 30       	cpi	r18, 0x05	; 5
     c5a:	31 05       	cpc	r19, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <DIO_SetPinDirection+0x78>
     c5e:	71 c0       	rjmp	.+226    	; 0xd42 <DIO_SetPinDirection+0x15a>
     c60:	8f 81       	ldd	r24, Y+7	; 0x07
     c62:	98 85       	ldd	r25, Y+8	; 0x08
     c64:	85 30       	cpi	r24, 0x05	; 5
     c66:	91 05       	cpc	r25, r1
     c68:	0c f4       	brge	.+2      	; 0xc6c <DIO_SetPinDirection+0x84>
     c6a:	57 c0       	rjmp	.+174    	; 0xd1a <DIO_SetPinDirection+0x132>
     c6c:	2f 81       	ldd	r18, Y+7	; 0x07
     c6e:	38 85       	ldd	r19, Y+8	; 0x08
     c70:	26 30       	cpi	r18, 0x06	; 6
     c72:	31 05       	cpc	r19, r1
     c74:	09 f4       	brne	.+2      	; 0xc78 <DIO_SetPinDirection+0x90>
     c76:	79 c0       	rjmp	.+242    	; 0xd6a <DIO_SetPinDirection+0x182>
     c78:	8c c0       	rjmp	.+280    	; 0xd92 <DIO_SetPinDirection+0x1aa>
			{
			case PORTA:SET_BIT(DDRA_REG,Pin_ID);break;
     c7a:	aa e3       	ldi	r26, 0x3A	; 58
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	ea e3       	ldi	r30, 0x3A	; 58
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 2e       	mov	r0, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_SetPinDirection+0xb0>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_SetPinDirection+0xac>
     c9c:	84 2b       	or	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	4d c1       	rjmp	.+666    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTB:SET_BIT(DDRB_REG,Pin_ID);break;
     ca2:	a7 e3       	ldi	r26, 0x37	; 55
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e3       	ldi	r30, 0x37	; 55
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_SetPinDirection+0xd8>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_SetPinDirection+0xd4>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	39 c1       	rjmp	.+626    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTC:SET_BIT(DDRC_REG,Pin_ID);break;
     cca:	a4 e3       	ldi	r26, 0x34	; 52
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e4 e3       	ldi	r30, 0x34	; 52
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_SetPinDirection+0x100>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_SetPinDirection+0xfc>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	25 c1       	rjmp	.+586    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTD:SET_BIT(DDRD_REG,Pin_ID);break;
     cf2:	a1 e3       	ldi	r26, 0x31	; 49
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e1 e3       	ldi	r30, 0x31	; 49
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_SetPinDirection+0x128>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_SetPinDirection+0x124>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	11 c1       	rjmp	.+546    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTE:SET_BIT(DDRE_REG,Pin_ID);break;
     d1a:	a2 e2       	ldi	r26, 0x22	; 34
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e2 e2       	ldi	r30, 0x22	; 34
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_SetPinDirection+0x150>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_SetPinDirection+0x14c>
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	fd c0       	rjmp	.+506    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTF:SET_BIT(DDRF_REG,Pin_ID);break;
     d42:	a1 e6       	ldi	r26, 0x61	; 97
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e1 e6       	ldi	r30, 0x61	; 97
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_SetPinDirection+0x178>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_SetPinDirection+0x174>
     d64:	84 2b       	or	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	e9 c0       	rjmp	.+466    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTG:SET_BIT(DDRG_REG,Pin_ID);break;
     d6a:	a4 e6       	ldi	r26, 0x64	; 100
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e4 e6       	ldi	r30, 0x64	; 100
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_SetPinDirection+0x1a0>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_SetPinDirection+0x19c>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	d5 c0       	rjmp	.+426    	; 0xf3c <DIO_SetPinDirection+0x354>
			default:ErrorState = DIO_PortOutOfRange; break;
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	d2 c0       	rjmp	.+420    	; 0xf3c <DIO_SetPinDirection+0x354>
			}
		}
		else if (Pin_Dir == INPUT)
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	88 23       	and	r24, r24
     d9c:	09 f0       	breq	.+2      	; 0xda0 <DIO_SetPinDirection+0x1b8>
     d9e:	c9 c0       	rjmp	.+402    	; 0xf32 <DIO_SetPinDirection+0x34a>
		{
			switch(Port_ID)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	3e 83       	std	Y+6, r19	; 0x06
     da8:	2d 83       	std	Y+5, r18	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <DIO_SetPinDirection+0x1ce>
     db4:	67 c0       	rjmp	.+206    	; 0xe84 <DIO_SetPinDirection+0x29c>
     db6:	2d 81       	ldd	r18, Y+5	; 0x05
     db8:	3e 81       	ldd	r19, Y+6	; 0x06
     dba:	24 30       	cpi	r18, 0x04	; 4
     dbc:	31 05       	cpc	r19, r1
     dbe:	84 f4       	brge	.+32     	; 0xde0 <DIO_SetPinDirection+0x1f8>
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	99 f1       	breq	.+102    	; 0xe30 <DIO_SetPinDirection+0x248>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <DIO_SetPinDirection+0x1ee>
     dd4:	42 c0       	rjmp	.+132    	; 0xe5a <DIO_SetPinDirection+0x272>
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	a1 f0       	breq	.+40     	; 0xe06 <DIO_SetPinDirection+0x21e>
     dde:	a6 c0       	rjmp	.+332    	; 0xf2c <DIO_SetPinDirection+0x344>
     de0:	2d 81       	ldd	r18, Y+5	; 0x05
     de2:	3e 81       	ldd	r19, Y+6	; 0x06
     de4:	25 30       	cpi	r18, 0x05	; 5
     de6:	31 05       	cpc	r19, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <DIO_SetPinDirection+0x204>
     dea:	76 c0       	rjmp	.+236    	; 0xed8 <DIO_SetPinDirection+0x2f0>
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	85 30       	cpi	r24, 0x05	; 5
     df2:	91 05       	cpc	r25, r1
     df4:	0c f4       	brge	.+2      	; 0xdf8 <DIO_SetPinDirection+0x210>
     df6:	5b c0       	rjmp	.+182    	; 0xeae <DIO_SetPinDirection+0x2c6>
     df8:	2d 81       	ldd	r18, Y+5	; 0x05
     dfa:	3e 81       	ldd	r19, Y+6	; 0x06
     dfc:	26 30       	cpi	r18, 0x06	; 6
     dfe:	31 05       	cpc	r19, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_SetPinDirection+0x21c>
     e02:	7f c0       	rjmp	.+254    	; 0xf02 <DIO_SetPinDirection+0x31a>
     e04:	93 c0       	rjmp	.+294    	; 0xf2c <DIO_SetPinDirection+0x344>
			{
			case PORTA:CLR_BIT(DDRA_REG,Pin_ID);break;
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_SetPinDirection+0x23c>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_SetPinDirection+0x238>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	86 c0       	rjmp	.+268    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTB:CLR_BIT(DDRB_REG,Pin_ID);break;
     e30:	a7 e3       	ldi	r26, 0x37	; 55
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e3       	ldi	r30, 0x37	; 55
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_SetPinDirection+0x266>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_SetPinDirection+0x262>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	71 c0       	rjmp	.+226    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTC:CLR_BIT(DDRC_REG,Pin_ID);break;
     e5a:	a4 e3       	ldi	r26, 0x34	; 52
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e4 e3       	ldi	r30, 0x34	; 52
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_SetPinDirection+0x290>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_SetPinDirection+0x28c>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	5c c0       	rjmp	.+184    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTD:CLR_BIT(DDRD_REG,Pin_ID);break;
     e84:	a1 e3       	ldi	r26, 0x31	; 49
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_SetPinDirection+0x2ba>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_SetPinDirection+0x2b6>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTE:CLR_BIT(DDRE_REG,Pin_ID);break;
     eae:	a2 e2       	ldi	r26, 0x22	; 34
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e2 e2       	ldi	r30, 0x22	; 34
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_SetPinDirection+0x2e4>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_SetPinDirection+0x2e0>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	32 c0       	rjmp	.+100    	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTF:CLR_BIT(DDRF_REG,Pin_ID);break;
     ed8:	a1 e6       	ldi	r26, 0x61	; 97
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e6       	ldi	r30, 0x61	; 97
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_SetPinDirection+0x30e>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_SetPinDirection+0x30a>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	1d c0       	rjmp	.+58     	; 0xf3c <DIO_SetPinDirection+0x354>
			case PORTG:CLR_BIT(DDRG_REG,Pin_ID);break;
     f02:	a4 e6       	ldi	r26, 0x64	; 100
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e4 e6       	ldi	r30, 0x64	; 100
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_SetPinDirection+0x338>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_SetPinDirection+0x334>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <DIO_SetPinDirection+0x354>
			default:ErrorState = DIO_PortOutOfRange;break;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <DIO_SetPinDirection+0x354>
			}
		}
		else
		{
			ErrorState = DIO_DirectionNotCorrect;
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_SetPinDirection+0x354>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3e:	28 96       	adiw	r28, 0x08	; 8
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 Port_ID,u8 Pin_ID,u8 Pin_Val)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	28 97       	sbiw	r28, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	6b 83       	std	Y+3, r22	; 0x03
     f68:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
     f6a:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	08 f0       	brcs	.+2      	; 0xf74 <DIO_SetPinValue+0x24>
     f72:	96 c1       	rjmp	.+812    	; 0x12a0 <__stack+0x1a1>
	{
		if(Pin_Val == HIGH)
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	09 f0       	breq	.+2      	; 0xf7c <DIO_SetPinValue+0x2c>
     f7a:	c2 c0       	rjmp	.+388    	; 0x1100 <__stack+0x1>
		{
			switch(Port_ID)
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	38 87       	std	Y+8, r19	; 0x08
     f84:	2f 83       	std	Y+7, r18	; 0x07
     f86:	8f 81       	ldd	r24, Y+7	; 0x07
     f88:	98 85       	ldd	r25, Y+8	; 0x08
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <DIO_SetPinValue+0x42>
     f90:	64 c0       	rjmp	.+200    	; 0x105a <DIO_SetPinValue+0x10a>
     f92:	2f 81       	ldd	r18, Y+7	; 0x07
     f94:	38 85       	ldd	r19, Y+8	; 0x08
     f96:	24 30       	cpi	r18, 0x04	; 4
     f98:	31 05       	cpc	r19, r1
     f9a:	84 f4       	brge	.+32     	; 0xfbc <DIO_SetPinValue+0x6c>
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	91 f1       	breq	.+100    	; 0x100a <DIO_SetPinValue+0xba>
     fa6:	2f 81       	ldd	r18, Y+7	; 0x07
     fa8:	38 85       	ldd	r19, Y+8	; 0x08
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <DIO_SetPinValue+0x62>
     fb0:	40 c0       	rjmp	.+128    	; 0x1032 <DIO_SetPinValue+0xe2>
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
     fb4:	98 85       	ldd	r25, Y+8	; 0x08
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	a1 f0       	breq	.+40     	; 0xfe2 <DIO_SetPinValue+0x92>
     fba:	9f c0       	rjmp	.+318    	; 0x10fa <DIO_SetPinValue+0x1aa>
     fbc:	2f 81       	ldd	r18, Y+7	; 0x07
     fbe:	38 85       	ldd	r19, Y+8	; 0x08
     fc0:	25 30       	cpi	r18, 0x05	; 5
     fc2:	31 05       	cpc	r19, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <DIO_SetPinValue+0x78>
     fc6:	71 c0       	rjmp	.+226    	; 0x10aa <DIO_SetPinValue+0x15a>
     fc8:	8f 81       	ldd	r24, Y+7	; 0x07
     fca:	98 85       	ldd	r25, Y+8	; 0x08
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	91 05       	cpc	r25, r1
     fd0:	0c f4       	brge	.+2      	; 0xfd4 <DIO_SetPinValue+0x84>
     fd2:	57 c0       	rjmp	.+174    	; 0x1082 <DIO_SetPinValue+0x132>
     fd4:	2f 81       	ldd	r18, Y+7	; 0x07
     fd6:	38 85       	ldd	r19, Y+8	; 0x08
     fd8:	26 30       	cpi	r18, 0x06	; 6
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_SetPinValue+0x90>
     fde:	79 c0       	rjmp	.+242    	; 0x10d2 <DIO_SetPinValue+0x182>
     fe0:	8c c0       	rjmp	.+280    	; 0x10fa <DIO_SetPinValue+0x1aa>
			{
			case PORTA:SET_BIT(PORTA_REG,Pin_ID);break;
     fe2:	ab e3       	ldi	r26, 0x3B	; 59
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e3       	ldi	r30, 0x3B	; 59
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_SetPinValue+0xb0>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_SetPinValue+0xac>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	4d c1       	rjmp	.+666    	; 0x12a4 <__stack+0x1a5>
			case PORTB:SET_BIT(PORTB_REG,Pin_ID);break;
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_SetPinValue+0xd8>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_SetPinValue+0xd4>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	39 c1       	rjmp	.+626    	; 0x12a4 <__stack+0x1a5>
			case PORTC:SET_BIT(PORTC_REG,Pin_ID);break;
    1032:	a5 e3       	ldi	r26, 0x35	; 53
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e3       	ldi	r30, 0x35	; 53
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_SetPinValue+0x100>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_SetPinValue+0xfc>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	25 c1       	rjmp	.+586    	; 0x12a4 <__stack+0x1a5>
			case PORTD:SET_BIT(PORTD_REG,Pin_ID);break;
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_SetPinValue+0x128>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_SetPinValue+0x124>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	11 c1       	rjmp	.+546    	; 0x12a4 <__stack+0x1a5>
			case PORTE:SET_BIT(PORTE_REG,Pin_ID);break;
    1082:	a3 e2       	ldi	r26, 0x23	; 35
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e2       	ldi	r30, 0x23	; 35
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_SetPinValue+0x150>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_SetPinValue+0x14c>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	fd c0       	rjmp	.+506    	; 0x12a4 <__stack+0x1a5>
			case PORTF:SET_BIT(PORTF_REG,Pin_ID);break;
    10aa:	a2 e6       	ldi	r26, 0x62	; 98
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e6       	ldi	r30, 0x62	; 98
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_SetPinValue+0x178>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_SetPinValue+0x174>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	e9 c0       	rjmp	.+466    	; 0x12a4 <__stack+0x1a5>
			case PORTG:SET_BIT(PORTG_REG,Pin_ID);break;
    10d2:	a5 e6       	ldi	r26, 0x65	; 101
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e6       	ldi	r30, 0x65	; 101
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinValue+0x1a0>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinValue+0x19c>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	d5 c0       	rjmp	.+426    	; 0x12a4 <__stack+0x1a5>
			default:ErrorState = DIO_PortOutOfRange; break;
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	d2 c0       	rjmp	.+420    	; 0x12a4 <__stack+0x1a5>
			}
		}
		else if (Pin_Val == LOW)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <__stack+0x9>
    1106:	c9 c0       	rjmp	.+402    	; 0x129a <__stack+0x19b>
		{
			switch(Port_ID)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <__stack+0x1f>
    111c:	67 c0       	rjmp	.+206    	; 0x11ec <__stack+0xed>
    111e:	2d 81       	ldd	r18, Y+5	; 0x05
    1120:	3e 81       	ldd	r19, Y+6	; 0x06
    1122:	24 30       	cpi	r18, 0x04	; 4
    1124:	31 05       	cpc	r19, r1
    1126:	84 f4       	brge	.+32     	; 0x1148 <__stack+0x49>
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	91 05       	cpc	r25, r1
    1130:	99 f1       	breq	.+102    	; 0x1198 <__stack+0x99>
    1132:	2d 81       	ldd	r18, Y+5	; 0x05
    1134:	3e 81       	ldd	r19, Y+6	; 0x06
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	0c f0       	brlt	.+2      	; 0x113e <__stack+0x3f>
    113c:	42 c0       	rjmp	.+132    	; 0x11c2 <__stack+0xc3>
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	a1 f0       	breq	.+40     	; 0x116e <__stack+0x6f>
    1146:	a6 c0       	rjmp	.+332    	; 0x1294 <__stack+0x195>
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	3e 81       	ldd	r19, Y+6	; 0x06
    114c:	25 30       	cpi	r18, 0x05	; 5
    114e:	31 05       	cpc	r19, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <__stack+0x55>
    1152:	76 c0       	rjmp	.+236    	; 0x1240 <__stack+0x141>
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	85 30       	cpi	r24, 0x05	; 5
    115a:	91 05       	cpc	r25, r1
    115c:	0c f4       	brge	.+2      	; 0x1160 <__stack+0x61>
    115e:	5b c0       	rjmp	.+182    	; 0x1216 <__stack+0x117>
    1160:	2d 81       	ldd	r18, Y+5	; 0x05
    1162:	3e 81       	ldd	r19, Y+6	; 0x06
    1164:	26 30       	cpi	r18, 0x06	; 6
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <__stack+0x6d>
    116a:	7f c0       	rjmp	.+254    	; 0x126a <__stack+0x16b>
    116c:	93 c0       	rjmp	.+294    	; 0x1294 <__stack+0x195>
			{
			case PORTA:CLR_BIT(PORTA_REG,Pin_ID);break;
    116e:	ab e3       	ldi	r26, 0x3B	; 59
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <__stack+0x8d>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <__stack+0x89>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	86 c0       	rjmp	.+268    	; 0x12a4 <__stack+0x1a5>
			case PORTB:CLR_BIT(PORTB_REG,Pin_ID);break;
    1198:	a8 e3       	ldi	r26, 0x38	; 56
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <__stack+0xb7>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <__stack+0xb3>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	71 c0       	rjmp	.+226    	; 0x12a4 <__stack+0x1a5>
			case PORTC:CLR_BIT(PORTC_REG,Pin_ID);break;
    11c2:	a5 e3       	ldi	r26, 0x35	; 53
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e3       	ldi	r30, 0x35	; 53
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <__stack+0xe1>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <__stack+0xdd>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	5c c0       	rjmp	.+184    	; 0x12a4 <__stack+0x1a5>
			case PORTD:CLR_BIT(PORTD_REG,Pin_ID);break;
    11ec:	a2 e3       	ldi	r26, 0x32	; 50
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__stack+0x10b>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <__stack+0x107>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	47 c0       	rjmp	.+142    	; 0x12a4 <__stack+0x1a5>
			case PORTE:CLR_BIT(PORTE_REG,Pin_ID);break;
    1216:	a3 e2       	ldi	r26, 0x23	; 35
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e3 e2       	ldi	r30, 0x23	; 35
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <__stack+0x135>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <__stack+0x131>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	32 c0       	rjmp	.+100    	; 0x12a4 <__stack+0x1a5>
			case PORTF:CLR_BIT(PORTF_REG,Pin_ID);break;
    1240:	a2 e6       	ldi	r26, 0x62	; 98
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e2 e6       	ldi	r30, 0x62	; 98
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <__stack+0x15f>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <__stack+0x15b>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	1d c0       	rjmp	.+58     	; 0x12a4 <__stack+0x1a5>
			case PORTG:CLR_BIT(PORTG_REG,Pin_ID);break;
    126a:	a5 e6       	ldi	r26, 0x65	; 101
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e6       	ldi	r30, 0x65	; 101
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__stack+0x189>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <__stack+0x185>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__stack+0x1a5>
			default:ErrorState = DIO_PortOutOfRange; break;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <__stack+0x1a5>
			}
		}
		else
		{
			ErrorState = DIO_ValueNotCorrect;
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <__stack+0x1a5>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a6:	28 96       	adiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_ReadPin>:

u8	DIO_ReadPin(u8 Port_ID,u8 Pin_ID,u8 * PinReading)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	27 97       	sbiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	6b 83       	std	Y+3, r22	; 0x03
    12d0:	5d 83       	std	Y+5, r21	; 0x05
    12d2:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	*PinReading = 0;
    12d6:	ec 81       	ldd	r30, Y+4	; 0x04
    12d8:	fd 81       	ldd	r31, Y+5	; 0x05
    12da:	10 82       	st	Z, r1
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <DIO_ReadPin+0x2c>
    12e2:	c2 c0       	rjmp	.+388    	; 0x1468 <DIO_ReadPin+0x1b0>
	{
		switch(Port_ID)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3f 83       	std	Y+7, r19	; 0x07
    12ec:	2e 83       	std	Y+6, r18	; 0x06
    12ee:	4e 81       	ldd	r20, Y+6	; 0x06
    12f0:	5f 81       	ldd	r21, Y+7	; 0x07
    12f2:	43 30       	cpi	r20, 0x03	; 3
    12f4:	51 05       	cpc	r21, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <DIO_ReadPin+0x42>
    12f8:	64 c0       	rjmp	.+200    	; 0x13c2 <DIO_ReadPin+0x10a>
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	91 05       	cpc	r25, r1
    1302:	84 f4       	brge	.+32     	; 0x1324 <DIO_ReadPin+0x6c>
    1304:	2e 81       	ldd	r18, Y+6	; 0x06
    1306:	3f 81       	ldd	r19, Y+7	; 0x07
    1308:	21 30       	cpi	r18, 0x01	; 1
    130a:	31 05       	cpc	r19, r1
    130c:	91 f1       	breq	.+100    	; 0x1372 <DIO_ReadPin+0xba>
    130e:	4e 81       	ldd	r20, Y+6	; 0x06
    1310:	5f 81       	ldd	r21, Y+7	; 0x07
    1312:	42 30       	cpi	r20, 0x02	; 2
    1314:	51 05       	cpc	r21, r1
    1316:	0c f0       	brlt	.+2      	; 0x131a <DIO_ReadPin+0x62>
    1318:	40 c0       	rjmp	.+128    	; 0x139a <DIO_ReadPin+0xe2>
    131a:	8e 81       	ldd	r24, Y+6	; 0x06
    131c:	9f 81       	ldd	r25, Y+7	; 0x07
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	a1 f0       	breq	.+40     	; 0x134a <DIO_ReadPin+0x92>
    1322:	9f c0       	rjmp	.+318    	; 0x1462 <DIO_ReadPin+0x1aa>
    1324:	2e 81       	ldd	r18, Y+6	; 0x06
    1326:	3f 81       	ldd	r19, Y+7	; 0x07
    1328:	25 30       	cpi	r18, 0x05	; 5
    132a:	31 05       	cpc	r19, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <DIO_ReadPin+0x78>
    132e:	71 c0       	rjmp	.+226    	; 0x1412 <DIO_ReadPin+0x15a>
    1330:	4e 81       	ldd	r20, Y+6	; 0x06
    1332:	5f 81       	ldd	r21, Y+7	; 0x07
    1334:	45 30       	cpi	r20, 0x05	; 5
    1336:	51 05       	cpc	r21, r1
    1338:	0c f4       	brge	.+2      	; 0x133c <DIO_ReadPin+0x84>
    133a:	57 c0       	rjmp	.+174    	; 0x13ea <DIO_ReadPin+0x132>
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	86 30       	cpi	r24, 0x06	; 6
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <DIO_ReadPin+0x90>
    1346:	79 c0       	rjmp	.+242    	; 0x143a <DIO_ReadPin+0x182>
    1348:	8c c0       	rjmp	.+280    	; 0x1462 <DIO_ReadPin+0x1aa>
		{
			case PORTA:*PinReading = GET_BIT(PINA_REG,Pin_ID);break;
    134a:	e9 e3       	ldi	r30, 0x39	; 57
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_ReadPin+0xaa>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_ReadPin+0xa6>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	ec 81       	ldd	r30, Y+4	; 0x04
    136c:	fd 81       	ldd	r31, Y+5	; 0x05
    136e:	80 83       	st	Z, r24
    1370:	7d c0       	rjmp	.+250    	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTB:*PinReading = GET_BIT(PINB_REG,Pin_ID);break;
    1372:	e6 e3       	ldi	r30, 0x36	; 54
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_ReadPin+0xd2>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_ReadPin+0xce>
    138e:	ca 01       	movw	r24, r20
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	ec 81       	ldd	r30, Y+4	; 0x04
    1394:	fd 81       	ldd	r31, Y+5	; 0x05
    1396:	80 83       	st	Z, r24
    1398:	69 c0       	rjmp	.+210    	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTC:*PinReading = GET_BIT(PINC_REG,Pin_ID);break;
    139a:	e3 e3       	ldi	r30, 0x33	; 51
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_ReadPin+0xfa>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_ReadPin+0xf6>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	ec 81       	ldd	r30, Y+4	; 0x04
    13bc:	fd 81       	ldd	r31, Y+5	; 0x05
    13be:	80 83       	st	Z, r24
    13c0:	55 c0       	rjmp	.+170    	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTD:*PinReading = GET_BIT(PIND_REG,Pin_ID);break;
    13c2:	e0 e3       	ldi	r30, 0x30	; 48
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a9 01       	movw	r20, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_ReadPin+0x122>
    13d6:	55 95       	asr	r21
    13d8:	47 95       	ror	r20
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_ReadPin+0x11e>
    13de:	ca 01       	movw	r24, r20
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	ec 81       	ldd	r30, Y+4	; 0x04
    13e4:	fd 81       	ldd	r31, Y+5	; 0x05
    13e6:	80 83       	st	Z, r24
    13e8:	41 c0       	rjmp	.+130    	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTE:*PinReading = GET_BIT(PINE_REG,Pin_ID);break;
    13ea:	e1 e2       	ldi	r30, 0x21	; 33
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_ReadPin+0x14a>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_ReadPin+0x146>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	ec 81       	ldd	r30, Y+4	; 0x04
    140c:	fd 81       	ldd	r31, Y+5	; 0x05
    140e:	80 83       	st	Z, r24
    1410:	2d c0       	rjmp	.+90     	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTF:*PinReading = GET_BIT(PINF_REG,Pin_ID);break;
    1412:	e0 e2       	ldi	r30, 0x20	; 32
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a9 01       	movw	r20, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_ReadPin+0x172>
    1426:	55 95       	asr	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_ReadPin+0x16e>
    142e:	ca 01       	movw	r24, r20
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	ec 81       	ldd	r30, Y+4	; 0x04
    1434:	fd 81       	ldd	r31, Y+5	; 0x05
    1436:	80 83       	st	Z, r24
    1438:	19 c0       	rjmp	.+50     	; 0x146c <DIO_ReadPin+0x1b4>
			case PORTG:*PinReading = GET_BIT(PING_REG,Pin_ID);break;
    143a:	e3 e6       	ldi	r30, 0x63	; 99
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a9 01       	movw	r20, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_ReadPin+0x19a>
    144e:	55 95       	asr	r21
    1450:	47 95       	ror	r20
    1452:	8a 95       	dec	r24
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_ReadPin+0x196>
    1456:	ca 01       	movw	r24, r20
    1458:	81 70       	andi	r24, 0x01	; 1
    145a:	ec 81       	ldd	r30, Y+4	; 0x04
    145c:	fd 81       	ldd	r31, Y+5	; 0x05
    145e:	80 83       	st	Z, r24
    1460:	05 c0       	rjmp	.+10     	; 0x146c <DIO_ReadPin+0x1b4>
			default:ErrorState = DIO_PortOutOfRange; break;
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_ReadPin+0x1b4>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	27 96       	adiw	r28, 0x07	; 7
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <DIO_TogglePin>:


u8 DIO_TogglePin(u8 Port_ID,u8 Pin_ID)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DIO_TogglePin+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_TogglePin+0x8>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    1492:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	08 f0       	brcs	.+2      	; 0x149c <DIO_TogglePin+0x1c>
    149a:	c2 c0       	rjmp	.+388    	; 0x1620 <DIO_TogglePin+0x1a0>
	{
		switch(Port_ID)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <DIO_TogglePin+0x32>
    14b0:	64 c0       	rjmp	.+200    	; 0x157a <DIO_TogglePin+0xfa>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	24 30       	cpi	r18, 0x04	; 4
    14b8:	31 05       	cpc	r19, r1
    14ba:	84 f4       	brge	.+32     	; 0x14dc <DIO_TogglePin+0x5c>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	91 f1       	breq	.+100    	; 0x152a <DIO_TogglePin+0xaa>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <DIO_TogglePin+0x52>
    14d0:	40 c0       	rjmp	.+128    	; 0x1552 <DIO_TogglePin+0xd2>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	a1 f0       	breq	.+40     	; 0x1502 <DIO_TogglePin+0x82>
    14da:	9f c0       	rjmp	.+318    	; 0x161a <DIO_TogglePin+0x19a>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	25 30       	cpi	r18, 0x05	; 5
    14e2:	31 05       	cpc	r19, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <DIO_TogglePin+0x68>
    14e6:	71 c0       	rjmp	.+226    	; 0x15ca <DIO_TogglePin+0x14a>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	85 30       	cpi	r24, 0x05	; 5
    14ee:	91 05       	cpc	r25, r1
    14f0:	0c f4       	brge	.+2      	; 0x14f4 <DIO_TogglePin+0x74>
    14f2:	57 c0       	rjmp	.+174    	; 0x15a2 <DIO_TogglePin+0x122>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	26 30       	cpi	r18, 0x06	; 6
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <DIO_TogglePin+0x80>
    14fe:	79 c0       	rjmp	.+242    	; 0x15f2 <DIO_TogglePin+0x172>
    1500:	8c c0       	rjmp	.+280    	; 0x161a <DIO_TogglePin+0x19a>
		{
			case PORTA:TOG_BIT(PORTA_REG,Pin_ID);break;
    1502:	ab e3       	ldi	r26, 0x3B	; 59
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_TogglePin+0xa0>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_TogglePin+0x9c>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	7d c0       	rjmp	.+250    	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTB:TOG_BIT(PORTB_REG,Pin_ID);break;
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e3       	ldi	r30, 0x38	; 56
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_TogglePin+0xc8>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_TogglePin+0xc4>
    154c:	84 27       	eor	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	69 c0       	rjmp	.+210    	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTC:TOG_BIT(PORTC_REG,Pin_ID);break;
    1552:	a5 e3       	ldi	r26, 0x35	; 53
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_TogglePin+0xf0>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_TogglePin+0xec>
    1574:	84 27       	eor	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	55 c0       	rjmp	.+170    	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTD:TOG_BIT(PORTD_REG,Pin_ID);break;
    157a:	a2 e3       	ldi	r26, 0x32	; 50
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e2 e3       	ldi	r30, 0x32	; 50
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_TogglePin+0x118>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_TogglePin+0x114>
    159c:	84 27       	eor	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	41 c0       	rjmp	.+130    	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTE:TOG_BIT(PORTE_REG,Pin_ID);break;
    15a2:	a3 e2       	ldi	r26, 0x23	; 35
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e3 e2       	ldi	r30, 0x23	; 35
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_TogglePin+0x140>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_TogglePin+0x13c>
    15c4:	84 27       	eor	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	2d c0       	rjmp	.+90     	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTF:TOG_BIT(PORTF_REG,Pin_ID);break;
    15ca:	a2 e6       	ldi	r26, 0x62	; 98
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e2 e6       	ldi	r30, 0x62	; 98
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_TogglePin+0x168>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_TogglePin+0x164>
    15ec:	84 27       	eor	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <DIO_TogglePin+0x1a4>
			case PORTG:TOG_BIT(PORTG_REG,Pin_ID);break;
    15f2:	a5 e6       	ldi	r26, 0x65	; 101
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e6       	ldi	r30, 0x65	; 101
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_TogglePin+0x190>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_TogglePin+0x18c>
    1614:	84 27       	eor	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <DIO_TogglePin+0x1a4>
			default:ErrorState = DIO_PortOutOfRange; break;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_TogglePin+0x1a4>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection(u8 Port_ID,u8 Port_Dir)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	29 97       	sbiw	r28, 0x09	; 9
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    164e:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>=PORTA && Port_ID<=PORTG && Port_Dir>= 0 && Port_Dir<= 255)
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	87 30       	cpi	r24, 0x07	; 7
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_SetPortDirection+0x22>
    1656:	f4 c0       	rjmp	.+488    	; 0x1840 <DIO_SetPortDirection+0x20a>
	{
		if(Port_Dir == OUTPUT_PORT)
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	8f 3f       	cpi	r24, 0xFF	; 255
    165c:	09 f0       	breq	.+2      	; 0x1660 <DIO_SetPortDirection+0x2a>
    165e:	51 c0       	rjmp	.+162    	; 0x1702 <DIO_SetPortDirection+0xcc>
		{
			switch(Port_ID)
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	39 87       	std	Y+9, r19	; 0x09
    1668:	28 87       	std	Y+8, r18	; 0x08
    166a:	88 85       	ldd	r24, Y+8	; 0x08
    166c:	99 85       	ldd	r25, Y+9	; 0x09
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	99 f1       	breq	.+102    	; 0x16da <DIO_SetPortDirection+0xa4>
    1674:	28 85       	ldd	r18, Y+8	; 0x08
    1676:	39 85       	ldd	r19, Y+9	; 0x09
    1678:	24 30       	cpi	r18, 0x04	; 4
    167a:	31 05       	cpc	r19, r1
    167c:	7c f4       	brge	.+30     	; 0x169c <DIO_SetPortDirection+0x66>
    167e:	88 85       	ldd	r24, Y+8	; 0x08
    1680:	99 85       	ldd	r25, Y+9	; 0x09
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	f9 f0       	breq	.+62     	; 0x16c6 <DIO_SetPortDirection+0x90>
    1688:	28 85       	ldd	r18, Y+8	; 0x08
    168a:	39 85       	ldd	r19, Y+9	; 0x09
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	fc f4       	brge	.+62     	; 0x16d0 <DIO_SetPortDirection+0x9a>
    1692:	88 85       	ldd	r24, Y+8	; 0x08
    1694:	99 85       	ldd	r25, Y+9	; 0x09
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	89 f0       	breq	.+34     	; 0x16bc <DIO_SetPortDirection+0x86>
    169a:	d4 c0       	rjmp	.+424    	; 0x1844 <DIO_SetPortDirection+0x20e>
    169c:	28 85       	ldd	r18, Y+8	; 0x08
    169e:	39 85       	ldd	r19, Y+9	; 0x09
    16a0:	25 30       	cpi	r18, 0x05	; 5
    16a2:	31 05       	cpc	r19, r1
    16a4:	21 f1       	breq	.+72     	; 0x16ee <DIO_SetPortDirection+0xb8>
    16a6:	88 85       	ldd	r24, Y+8	; 0x08
    16a8:	99 85       	ldd	r25, Y+9	; 0x09
    16aa:	85 30       	cpi	r24, 0x05	; 5
    16ac:	91 05       	cpc	r25, r1
    16ae:	d4 f0       	brlt	.+52     	; 0x16e4 <DIO_SetPortDirection+0xae>
    16b0:	28 85       	ldd	r18, Y+8	; 0x08
    16b2:	39 85       	ldd	r19, Y+9	; 0x09
    16b4:	26 30       	cpi	r18, 0x06	; 6
    16b6:	31 05       	cpc	r19, r1
    16b8:	f9 f0       	breq	.+62     	; 0x16f8 <DIO_SetPortDirection+0xc2>
    16ba:	c4 c0       	rjmp	.+392    	; 0x1844 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:SET_REG(DDRA_REG);break;
    16bc:	ea e3       	ldi	r30, 0x3A	; 58
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	80 83       	st	Z, r24
    16c4:	bf c0       	rjmp	.+382    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTB:SET_REG(DDRB_REG);break;
    16c6:	e7 e3       	ldi	r30, 0x37	; 55
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	80 83       	st	Z, r24
    16ce:	ba c0       	rjmp	.+372    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTC:SET_REG(DDRC_REG);break;
    16d0:	e4 e3       	ldi	r30, 0x34	; 52
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	80 83       	st	Z, r24
    16d8:	b5 c0       	rjmp	.+362    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTD:SET_REG(DDRD_REG);break;
    16da:	e1 e3       	ldi	r30, 0x31	; 49
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	b0 c0       	rjmp	.+352    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTE:SET_REG(DDRE_REG);break;
    16e4:	e2 e2       	ldi	r30, 0x22	; 34
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	80 83       	st	Z, r24
    16ec:	ab c0       	rjmp	.+342    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTF:SET_REG(DDRF_REG);break;
    16ee:	e1 e6       	ldi	r30, 0x61	; 97
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	80 83       	st	Z, r24
    16f6:	a6 c0       	rjmp	.+332    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTG:SET_REG(DDRG_REG);break;
    16f8:	e4 e6       	ldi	r30, 0x64	; 100
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	80 83       	st	Z, r24
    1700:	a1 c0       	rjmp	.+322    	; 0x1844 <DIO_SetPortDirection+0x20e>
			default:break;
			}
		}
		else if(Port_Dir == INPUT_PORT)
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <DIO_SetPortDirection+0xd4>
    1708:	4a c0       	rjmp	.+148    	; 0x179e <DIO_SetPortDirection+0x168>
		{
			switch(Port_ID)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3f 83       	std	Y+7, r19	; 0x07
    1712:	2e 83       	std	Y+6, r18	; 0x06
    1714:	8e 81       	ldd	r24, Y+6	; 0x06
    1716:	9f 81       	ldd	r25, Y+7	; 0x07
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	81 f1       	breq	.+96     	; 0x177e <DIO_SetPortDirection+0x148>
    171e:	2e 81       	ldd	r18, Y+6	; 0x06
    1720:	3f 81       	ldd	r19, Y+7	; 0x07
    1722:	24 30       	cpi	r18, 0x04	; 4
    1724:	31 05       	cpc	r19, r1
    1726:	7c f4       	brge	.+30     	; 0x1746 <DIO_SetPortDirection+0x110>
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	9f 81       	ldd	r25, Y+7	; 0x07
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	f1 f0       	breq	.+60     	; 0x176e <DIO_SetPortDirection+0x138>
    1732:	2e 81       	ldd	r18, Y+6	; 0x06
    1734:	3f 81       	ldd	r19, Y+7	; 0x07
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	ec f4       	brge	.+58     	; 0x1776 <DIO_SetPortDirection+0x140>
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	89 f0       	breq	.+34     	; 0x1766 <DIO_SetPortDirection+0x130>
    1744:	7f c0       	rjmp	.+254    	; 0x1844 <DIO_SetPortDirection+0x20e>
    1746:	2e 81       	ldd	r18, Y+6	; 0x06
    1748:	3f 81       	ldd	r19, Y+7	; 0x07
    174a:	25 30       	cpi	r18, 0x05	; 5
    174c:	31 05       	cpc	r19, r1
    174e:	f9 f0       	breq	.+62     	; 0x178e <DIO_SetPortDirection+0x158>
    1750:	8e 81       	ldd	r24, Y+6	; 0x06
    1752:	9f 81       	ldd	r25, Y+7	; 0x07
    1754:	85 30       	cpi	r24, 0x05	; 5
    1756:	91 05       	cpc	r25, r1
    1758:	b4 f0       	brlt	.+44     	; 0x1786 <DIO_SetPortDirection+0x150>
    175a:	2e 81       	ldd	r18, Y+6	; 0x06
    175c:	3f 81       	ldd	r19, Y+7	; 0x07
    175e:	26 30       	cpi	r18, 0x06	; 6
    1760:	31 05       	cpc	r19, r1
    1762:	c9 f0       	breq	.+50     	; 0x1796 <DIO_SetPortDirection+0x160>
    1764:	6f c0       	rjmp	.+222    	; 0x1844 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:CLR_REG(DDRA_REG);break;
    1766:	ea e3       	ldi	r30, 0x3A	; 58
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
    176c:	6b c0       	rjmp	.+214    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTB:CLR_REG(DDRB_REG);break;
    176e:	e7 e3       	ldi	r30, 0x37	; 55
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	10 82       	st	Z, r1
    1774:	67 c0       	rjmp	.+206    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTC:CLR_REG(DDRC_REG);break;
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	10 82       	st	Z, r1
    177c:	63 c0       	rjmp	.+198    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTD:CLR_REG(DDRD_REG);break;
    177e:	e1 e3       	ldi	r30, 0x31	; 49
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	10 82       	st	Z, r1
    1784:	5f c0       	rjmp	.+190    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTE:CLR_REG(DDRE_REG);break;
    1786:	e2 e2       	ldi	r30, 0x22	; 34
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	10 82       	st	Z, r1
    178c:	5b c0       	rjmp	.+182    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTF:CLR_REG(DDRF_REG);break;
    178e:	e1 e6       	ldi	r30, 0x61	; 97
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	10 82       	st	Z, r1
    1794:	57 c0       	rjmp	.+174    	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTG:CLR_REG(DDRG_REG);break;
    1796:	e4 e6       	ldi	r30, 0x64	; 100
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	10 82       	st	Z, r1
    179c:	53 c0       	rjmp	.+166    	; 0x1844 <DIO_SetPortDirection+0x20e>
			default:break;
			}
		}
		else
		{
			switch(Port_ID)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3d 83       	std	Y+5, r19	; 0x05
    17a6:	2c 83       	std	Y+4, r18	; 0x04
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	99 f1       	breq	.+102    	; 0x1818 <DIO_SetPortDirection+0x1e2>
    17b2:	2c 81       	ldd	r18, Y+4	; 0x04
    17b4:	3d 81       	ldd	r19, Y+5	; 0x05
    17b6:	24 30       	cpi	r18, 0x04	; 4
    17b8:	31 05       	cpc	r19, r1
    17ba:	7c f4       	brge	.+30     	; 0x17da <DIO_SetPortDirection+0x1a4>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	f9 f0       	breq	.+62     	; 0x1804 <DIO_SetPortDirection+0x1ce>
    17c6:	2c 81       	ldd	r18, Y+4	; 0x04
    17c8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	fc f4       	brge	.+62     	; 0x180e <DIO_SetPortDirection+0x1d8>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	89 f0       	breq	.+34     	; 0x17fa <DIO_SetPortDirection+0x1c4>
    17d8:	35 c0       	rjmp	.+106    	; 0x1844 <DIO_SetPortDirection+0x20e>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	25 30       	cpi	r18, 0x05	; 5
    17e0:	31 05       	cpc	r19, r1
    17e2:	21 f1       	breq	.+72     	; 0x182c <DIO_SetPortDirection+0x1f6>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	85 30       	cpi	r24, 0x05	; 5
    17ea:	91 05       	cpc	r25, r1
    17ec:	d4 f0       	brlt	.+52     	; 0x1822 <DIO_SetPortDirection+0x1ec>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	26 30       	cpi	r18, 0x06	; 6
    17f4:	31 05       	cpc	r19, r1
    17f6:	f9 f0       	breq	.+62     	; 0x1836 <DIO_SetPortDirection+0x200>
    17f8:	25 c0       	rjmp	.+74     	; 0x1844 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:DDRA_REG = Port_Dir;break;
    17fa:	ea e3       	ldi	r30, 0x3A	; 58
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	80 83       	st	Z, r24
    1802:	20 c0       	rjmp	.+64     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTB:DDRB_REG = Port_Dir;break;
    1804:	e7 e3       	ldi	r30, 0x37	; 55
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 83       	st	Z, r24
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTC:DDRC_REG = Port_Dir;break;
    180e:	e4 e3       	ldi	r30, 0x34	; 52
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTD:DDRD_REG = Port_Dir;break;
    1818:	e1 e3       	ldi	r30, 0x31	; 49
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	80 83       	st	Z, r24
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTE:DDRE_REG = Port_Dir;break;
    1822:	e2 e2       	ldi	r30, 0x22	; 34
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	80 83       	st	Z, r24
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTF:DDRF_REG = Port_Dir;break;
    182c:	e1 e6       	ldi	r30, 0x61	; 97
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	80 83       	st	Z, r24
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <DIO_SetPortDirection+0x20e>
			case PORTG:DDRG_REG = Port_Dir;break;
    1836:	e4 e6       	ldi	r30, 0x64	; 100
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	80 83       	st	Z, r24
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_SetPortDirection+0x20e>
			}
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1840:	85 e0       	ldi	r24, 0x05	; 5
    1842:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	29 96       	adiw	r28, 0x09	; 9
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <DIO_SetPortValue>:

u8 DIO_SetPortValue(u8 Port_ID,u8 Port_Val)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	29 97       	sbiw	r28, 0x09	; 9
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    1870:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>=PORTA && Port_ID<=PORTG && Port_Val>= 0 && Port_Val<= 255)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	87 30       	cpi	r24, 0x07	; 7
    1876:	08 f0       	brcs	.+2      	; 0x187a <DIO_SetPortValue+0x22>
    1878:	f4 c0       	rjmp	.+488    	; 0x1a62 <DIO_SetPortValue+0x20a>
	{
		if(Port_Val == HIGH_PORT)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	8f 3f       	cpi	r24, 0xFF	; 255
    187e:	09 f0       	breq	.+2      	; 0x1882 <DIO_SetPortValue+0x2a>
    1880:	51 c0       	rjmp	.+162    	; 0x1924 <DIO_SetPortValue+0xcc>
		{
			switch(Port_ID)
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	39 87       	std	Y+9, r19	; 0x09
    188a:	28 87       	std	Y+8, r18	; 0x08
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	99 85       	ldd	r25, Y+9	; 0x09
    1890:	83 30       	cpi	r24, 0x03	; 3
    1892:	91 05       	cpc	r25, r1
    1894:	99 f1       	breq	.+102    	; 0x18fc <DIO_SetPortValue+0xa4>
    1896:	28 85       	ldd	r18, Y+8	; 0x08
    1898:	39 85       	ldd	r19, Y+9	; 0x09
    189a:	24 30       	cpi	r18, 0x04	; 4
    189c:	31 05       	cpc	r19, r1
    189e:	7c f4       	brge	.+30     	; 0x18be <DIO_SetPortValue+0x66>
    18a0:	88 85       	ldd	r24, Y+8	; 0x08
    18a2:	99 85       	ldd	r25, Y+9	; 0x09
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	f9 f0       	breq	.+62     	; 0x18e8 <DIO_SetPortValue+0x90>
    18aa:	28 85       	ldd	r18, Y+8	; 0x08
    18ac:	39 85       	ldd	r19, Y+9	; 0x09
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	fc f4       	brge	.+62     	; 0x18f2 <DIO_SetPortValue+0x9a>
    18b4:	88 85       	ldd	r24, Y+8	; 0x08
    18b6:	99 85       	ldd	r25, Y+9	; 0x09
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	89 f0       	breq	.+34     	; 0x18de <DIO_SetPortValue+0x86>
    18bc:	d4 c0       	rjmp	.+424    	; 0x1a66 <DIO_SetPortValue+0x20e>
    18be:	28 85       	ldd	r18, Y+8	; 0x08
    18c0:	39 85       	ldd	r19, Y+9	; 0x09
    18c2:	25 30       	cpi	r18, 0x05	; 5
    18c4:	31 05       	cpc	r19, r1
    18c6:	21 f1       	breq	.+72     	; 0x1910 <DIO_SetPortValue+0xb8>
    18c8:	88 85       	ldd	r24, Y+8	; 0x08
    18ca:	99 85       	ldd	r25, Y+9	; 0x09
    18cc:	85 30       	cpi	r24, 0x05	; 5
    18ce:	91 05       	cpc	r25, r1
    18d0:	d4 f0       	brlt	.+52     	; 0x1906 <DIO_SetPortValue+0xae>
    18d2:	28 85       	ldd	r18, Y+8	; 0x08
    18d4:	39 85       	ldd	r19, Y+9	; 0x09
    18d6:	26 30       	cpi	r18, 0x06	; 6
    18d8:	31 05       	cpc	r19, r1
    18da:	f9 f0       	breq	.+62     	; 0x191a <DIO_SetPortValue+0xc2>
    18dc:	c4 c0       	rjmp	.+392    	; 0x1a66 <DIO_SetPortValue+0x20e>
			{
			case PORTA:SET_REG(PORTA_REG);break;
    18de:	eb e3       	ldi	r30, 0x3B	; 59
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
    18e6:	bf c0       	rjmp	.+382    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTB:SET_REG(PORTB_REG);break;
    18e8:	e8 e3       	ldi	r30, 0x38	; 56
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	80 83       	st	Z, r24
    18f0:	ba c0       	rjmp	.+372    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTC:SET_REG(PORTC_REG);break;
    18f2:	e5 e3       	ldi	r30, 0x35	; 53
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	b5 c0       	rjmp	.+362    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTD:SET_REG(PORTD_REG);break;
    18fc:	e2 e3       	ldi	r30, 0x32	; 50
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	80 83       	st	Z, r24
    1904:	b0 c0       	rjmp	.+352    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTE:SET_REG(PORTE_REG);break;
    1906:	e3 e2       	ldi	r30, 0x23	; 35
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	80 83       	st	Z, r24
    190e:	ab c0       	rjmp	.+342    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTF:SET_REG(PORTF_REG);break;
    1910:	e2 e6       	ldi	r30, 0x62	; 98
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	80 83       	st	Z, r24
    1918:	a6 c0       	rjmp	.+332    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTG:SET_REG(PORTG_REG);break;
    191a:	e5 e6       	ldi	r30, 0x65	; 101
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	80 83       	st	Z, r24
    1922:	a1 c0       	rjmp	.+322    	; 0x1a66 <DIO_SetPortValue+0x20e>
			default:break;
			}
		}
		else if(Port_Val == LOW_PORT)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 23       	and	r24, r24
    1928:	09 f0       	breq	.+2      	; 0x192c <DIO_SetPortValue+0xd4>
    192a:	4a c0       	rjmp	.+148    	; 0x19c0 <DIO_SetPortValue+0x168>
		{
			switch(Port_ID)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3f 83       	std	Y+7, r19	; 0x07
    1934:	2e 83       	std	Y+6, r18	; 0x06
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	9f 81       	ldd	r25, Y+7	; 0x07
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	81 f1       	breq	.+96     	; 0x19a0 <DIO_SetPortValue+0x148>
    1940:	2e 81       	ldd	r18, Y+6	; 0x06
    1942:	3f 81       	ldd	r19, Y+7	; 0x07
    1944:	24 30       	cpi	r18, 0x04	; 4
    1946:	31 05       	cpc	r19, r1
    1948:	7c f4       	brge	.+30     	; 0x1968 <DIO_SetPortValue+0x110>
    194a:	8e 81       	ldd	r24, Y+6	; 0x06
    194c:	9f 81       	ldd	r25, Y+7	; 0x07
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	f1 f0       	breq	.+60     	; 0x1990 <DIO_SetPortValue+0x138>
    1954:	2e 81       	ldd	r18, Y+6	; 0x06
    1956:	3f 81       	ldd	r19, Y+7	; 0x07
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	ec f4       	brge	.+58     	; 0x1998 <DIO_SetPortValue+0x140>
    195e:	8e 81       	ldd	r24, Y+6	; 0x06
    1960:	9f 81       	ldd	r25, Y+7	; 0x07
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	89 f0       	breq	.+34     	; 0x1988 <DIO_SetPortValue+0x130>
    1966:	7f c0       	rjmp	.+254    	; 0x1a66 <DIO_SetPortValue+0x20e>
    1968:	2e 81       	ldd	r18, Y+6	; 0x06
    196a:	3f 81       	ldd	r19, Y+7	; 0x07
    196c:	25 30       	cpi	r18, 0x05	; 5
    196e:	31 05       	cpc	r19, r1
    1970:	f9 f0       	breq	.+62     	; 0x19b0 <DIO_SetPortValue+0x158>
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	91 05       	cpc	r25, r1
    197a:	b4 f0       	brlt	.+44     	; 0x19a8 <DIO_SetPortValue+0x150>
    197c:	2e 81       	ldd	r18, Y+6	; 0x06
    197e:	3f 81       	ldd	r19, Y+7	; 0x07
    1980:	26 30       	cpi	r18, 0x06	; 6
    1982:	31 05       	cpc	r19, r1
    1984:	c9 f0       	breq	.+50     	; 0x19b8 <DIO_SetPortValue+0x160>
    1986:	6f c0       	rjmp	.+222    	; 0x1a66 <DIO_SetPortValue+0x20e>
			{
			case PORTA:CLR_REG(PORTA_REG);break;
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	10 82       	st	Z, r1
    198e:	6b c0       	rjmp	.+214    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTB:CLR_REG(PORTB_REG);break;
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
    1996:	67 c0       	rjmp	.+206    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTC:CLR_REG(PORTC_REG);break;
    1998:	e5 e3       	ldi	r30, 0x35	; 53
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	10 82       	st	Z, r1
    199e:	63 c0       	rjmp	.+198    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTD:CLR_REG(PORTD_REG);break;
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	10 82       	st	Z, r1
    19a6:	5f c0       	rjmp	.+190    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTE:CLR_REG(PORTE_REG);break;
    19a8:	e3 e2       	ldi	r30, 0x23	; 35
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	10 82       	st	Z, r1
    19ae:	5b c0       	rjmp	.+182    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTF:CLR_REG(PORTF_REG);break;
    19b0:	e2 e6       	ldi	r30, 0x62	; 98
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	10 82       	st	Z, r1
    19b6:	57 c0       	rjmp	.+174    	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTG:CLR_REG(PORTG_REG);break;
    19b8:	e5 e6       	ldi	r30, 0x65	; 101
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	10 82       	st	Z, r1
    19be:	53 c0       	rjmp	.+166    	; 0x1a66 <DIO_SetPortValue+0x20e>
			default:break;
			}
		}
		else
		{
			switch(Port_ID)
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3d 83       	std	Y+5, r19	; 0x05
    19c8:	2c 83       	std	Y+4, r18	; 0x04
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	91 05       	cpc	r25, r1
    19d2:	99 f1       	breq	.+102    	; 0x1a3a <DIO_SetPortValue+0x1e2>
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	24 30       	cpi	r18, 0x04	; 4
    19da:	31 05       	cpc	r19, r1
    19dc:	7c f4       	brge	.+30     	; 0x19fc <DIO_SetPortValue+0x1a4>
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	9d 81       	ldd	r25, Y+5	; 0x05
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	f9 f0       	breq	.+62     	; 0x1a26 <DIO_SetPortValue+0x1ce>
    19e8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ea:	3d 81       	ldd	r19, Y+5	; 0x05
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	fc f4       	brge	.+62     	; 0x1a30 <DIO_SetPortValue+0x1d8>
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	89 f0       	breq	.+34     	; 0x1a1c <DIO_SetPortValue+0x1c4>
    19fa:	35 c0       	rjmp	.+106    	; 0x1a66 <DIO_SetPortValue+0x20e>
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	25 30       	cpi	r18, 0x05	; 5
    1a02:	31 05       	cpc	r19, r1
    1a04:	21 f1       	breq	.+72     	; 0x1a4e <DIO_SetPortValue+0x1f6>
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	85 30       	cpi	r24, 0x05	; 5
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	d4 f0       	brlt	.+52     	; 0x1a44 <DIO_SetPortValue+0x1ec>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	26 30       	cpi	r18, 0x06	; 6
    1a16:	31 05       	cpc	r19, r1
    1a18:	f9 f0       	breq	.+62     	; 0x1a58 <DIO_SetPortValue+0x200>
    1a1a:	25 c0       	rjmp	.+74     	; 0x1a66 <DIO_SetPortValue+0x20e>
			{
			case PORTA:PORTA_REG = Port_Val;break;
    1a1c:	eb e3       	ldi	r30, 0x3B	; 59
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	80 83       	st	Z, r24
    1a24:	20 c0       	rjmp	.+64     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTB:PORTB_REG = Port_Val;break;
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	80 83       	st	Z, r24
    1a2e:	1b c0       	rjmp	.+54     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTC:PORTC_REG = Port_Val;break;
    1a30:	e5 e3       	ldi	r30, 0x35	; 53
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	80 83       	st	Z, r24
    1a38:	16 c0       	rjmp	.+44     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTD:PORTD_REG = Port_Val;break;
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	80 83       	st	Z, r24
    1a42:	11 c0       	rjmp	.+34     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTE:PORTE_REG = Port_Val;break;
    1a44:	e3 e2       	ldi	r30, 0x23	; 35
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	80 83       	st	Z, r24
    1a4c:	0c c0       	rjmp	.+24     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTF:PORTF_REG = Port_Val;break;
    1a4e:	e2 e6       	ldi	r30, 0x62	; 98
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	80 83       	st	Z, r24
    1a56:	07 c0       	rjmp	.+14     	; 0x1a66 <DIO_SetPortValue+0x20e>
			case PORTG:PORTG_REG = Port_Val;break;
    1a58:	e5 e6       	ldi	r30, 0x65	; 101
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	80 83       	st	Z, r24
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_SetPortValue+0x20e>
			}
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1a62:	85 e0       	ldi	r24, 0x05	; 5
    1a64:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	29 96       	adiw	r28, 0x09	; 9
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <DIO_ReadPort>:

u8	DIO_ReadPort(u8 Port_ID,u8 * PortReading)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <DIO_ReadPort+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <DIO_ReadPort+0x8>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_ReadPort+0xa>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	7c 83       	std	Y+4, r23	; 0x04
    1a8c:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
	*PortReading = 0;
    1a90:	eb 81       	ldd	r30, Y+3	; 0x03
    1a92:	fc 81       	ldd	r31, Y+4	; 0x04
    1a94:	10 82       	st	Z, r1
	if(Port_ID>= PORTA && Port_ID <=PORTG)
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	87 30       	cpi	r24, 0x07	; 7
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <DIO_ReadPort+0x24>
    1a9c:	62 c0       	rjmp	.+196    	; 0x1b62 <DIO_ReadPort+0xe8>
	{
		switch(Port_ID)
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3e 83       	std	Y+6, r19	; 0x06
    1aa6:	2d 83       	std	Y+5, r18	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	c9 f1       	breq	.+114    	; 0x1b24 <DIO_ReadPort+0xaa>
    1ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab6:	24 30       	cpi	r18, 0x04	; 4
    1ab8:	31 05       	cpc	r19, r1
    1aba:	7c f4       	brge	.+30     	; 0x1ada <DIO_ReadPort+0x60>
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	09 f1       	breq	.+66     	; 0x1b08 <DIO_ReadPort+0x8e>
    1ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	1c f5       	brge	.+70     	; 0x1b16 <DIO_ReadPort+0x9c>
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	89 f0       	breq	.+34     	; 0x1afa <DIO_ReadPort+0x80>
    1ad8:	41 c0       	rjmp	.+130    	; 0x1b5c <DIO_ReadPort+0xe2>
    1ada:	2d 81       	ldd	r18, Y+5	; 0x05
    1adc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ade:	25 30       	cpi	r18, 0x05	; 5
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	71 f1       	breq	.+92     	; 0x1b40 <DIO_ReadPort+0xc6>
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	85 30       	cpi	r24, 0x05	; 5
    1aea:	91 05       	cpc	r25, r1
    1aec:	14 f1       	brlt	.+68     	; 0x1b32 <DIO_ReadPort+0xb8>
    1aee:	2d 81       	ldd	r18, Y+5	; 0x05
    1af0:	3e 81       	ldd	r19, Y+6	; 0x06
    1af2:	26 30       	cpi	r18, 0x06	; 6
    1af4:	31 05       	cpc	r19, r1
    1af6:	59 f1       	breq	.+86     	; 0x1b4e <DIO_ReadPort+0xd4>
    1af8:	31 c0       	rjmp	.+98     	; 0x1b5c <DIO_ReadPort+0xe2>
		{
		case PORTA:*PortReading = GET_REG(PINA_REG);break;
    1afa:	e9 e3       	ldi	r30, 0x39	; 57
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	eb 81       	ldd	r30, Y+3	; 0x03
    1b02:	fc 81       	ldd	r31, Y+4	; 0x04
    1b04:	80 83       	st	Z, r24
    1b06:	2f c0       	rjmp	.+94     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTB:*PortReading = GET_REG(PINB_REG);break;
    1b08:	e6 e3       	ldi	r30, 0x36	; 54
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b10:	fc 81       	ldd	r31, Y+4	; 0x04
    1b12:	80 83       	st	Z, r24
    1b14:	28 c0       	rjmp	.+80     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTC:*PortReading = GET_REG(PINC_REG);break;
    1b16:	e3 e3       	ldi	r30, 0x33	; 51
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b20:	80 83       	st	Z, r24
    1b22:	21 c0       	rjmp	.+66     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTD:*PortReading = GET_REG(PIND_REG);break;
    1b24:	e0 e3       	ldi	r30, 0x30	; 48
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2e:	80 83       	st	Z, r24
    1b30:	1a c0       	rjmp	.+52     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTE:*PortReading = GET_REG(PINE_REG);break;
    1b32:	e1 e2       	ldi	r30, 0x21	; 33
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3c:	80 83       	st	Z, r24
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTF:*PortReading = GET_REG(PINF_REG);break;
    1b40:	e0 e2       	ldi	r30, 0x20	; 32
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	80 83       	st	Z, r24
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <DIO_ReadPort+0xec>
		case PORTG:*PortReading = GET_REG(PING_REG);break;
    1b4e:	e3 e6       	ldi	r30, 0x63	; 99
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	eb 81       	ldd	r30, Y+3	; 0x03
    1b56:	fc 81       	ldd	r31, Y+4	; 0x04
    1b58:	80 83       	st	Z, r24
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <DIO_ReadPort+0xec>
		default: ErrorState = DIO_PortOutOfRange;break;
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_ReadPort+0xec>
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	26 96       	adiw	r28, 0x06	; 6
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <DIO_TogglePort>:

u8 DIO_TogglePort(u8 Port_ID)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <DIO_TogglePort+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <DIO_TogglePort+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState = DIO_OK;
    1b88:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>= PORTA && Port_ID <=PORTG)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	87 30       	cpi	r24, 0x07	; 7
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <DIO_TogglePort+0x18>
    1b90:	69 c0       	rjmp	.+210    	; 0x1c64 <DIO_TogglePort+0xea>
	{
		switch(Port_ID)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3c 83       	std	Y+4, r19	; 0x04
    1b9a:	2b 83       	std	Y+3, r18	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	e1 f1       	breq	.+120    	; 0x1c1e <DIO_TogglePort+0xa4>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	24 30       	cpi	r18, 0x04	; 4
    1bac:	31 05       	cpc	r19, r1
    1bae:	7c f4       	brge	.+30     	; 0x1bce <DIO_TogglePort+0x54>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	11 f1       	breq	.+68     	; 0x1bfe <DIO_TogglePort+0x84>
    1bba:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	2c f5       	brge	.+74     	; 0x1c0e <DIO_TogglePort+0x94>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	89 f0       	breq	.+34     	; 0x1bee <DIO_TogglePort+0x74>
    1bcc:	48 c0       	rjmp	.+144    	; 0x1c5e <DIO_TogglePort+0xe4>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	25 30       	cpi	r18, 0x05	; 5
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	99 f1       	breq	.+102    	; 0x1c3e <DIO_TogglePort+0xc4>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	85 30       	cpi	r24, 0x05	; 5
    1bde:	91 05       	cpc	r25, r1
    1be0:	34 f1       	brlt	.+76     	; 0x1c2e <DIO_TogglePort+0xb4>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	26 30       	cpi	r18, 0x06	; 6
    1be8:	31 05       	cpc	r19, r1
    1bea:	89 f1       	breq	.+98     	; 0x1c4e <DIO_TogglePort+0xd4>
    1bec:	38 c0       	rjmp	.+112    	; 0x1c5e <DIO_TogglePort+0xe4>
		{
		case PORTA:TOG_REG(PORTA_REG);break;
    1bee:	ab e3       	ldi	r26, 0x3B	; 59
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 95       	com	r24
    1bfa:	8c 93       	st	X, r24
    1bfc:	35 c0       	rjmp	.+106    	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTB:TOG_REG(PORTB_REG);break;
    1bfe:	a8 e3       	ldi	r26, 0x38	; 56
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e8 e3       	ldi	r30, 0x38	; 56
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	80 95       	com	r24
    1c0a:	8c 93       	st	X, r24
    1c0c:	2d c0       	rjmp	.+90     	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTC:TOG_REG(PORTC_REG);break;
    1c0e:	a5 e3       	ldi	r26, 0x35	; 53
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e5 e3       	ldi	r30, 0x35	; 53
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 95       	com	r24
    1c1a:	8c 93       	st	X, r24
    1c1c:	25 c0       	rjmp	.+74     	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTD:TOG_REG(PORTD_REG);break;
    1c1e:	a2 e3       	ldi	r26, 0x32	; 50
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e2 e3       	ldi	r30, 0x32	; 50
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 95       	com	r24
    1c2a:	8c 93       	st	X, r24
    1c2c:	1d c0       	rjmp	.+58     	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTE:TOG_REG(PORTE_REG);break;
    1c2e:	a3 e2       	ldi	r26, 0x23	; 35
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e3 e2       	ldi	r30, 0x23	; 35
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 95       	com	r24
    1c3a:	8c 93       	st	X, r24
    1c3c:	15 c0       	rjmp	.+42     	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTF:TOG_REG(PORTF_REG);break;
    1c3e:	a2 e6       	ldi	r26, 0x62	; 98
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e2 e6       	ldi	r30, 0x62	; 98
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 95       	com	r24
    1c4a:	8c 93       	st	X, r24
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <DIO_TogglePort+0xee>
		case PORTG:TOG_REG(PORTG_REG);break;
    1c4e:	a5 e6       	ldi	r26, 0x65	; 101
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e6       	ldi	r30, 0x65	; 101
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 95       	com	r24
    1c5a:	8c 93       	st	X, r24
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <DIO_TogglePort+0xee>
		default:ErrorState = DIO_PortOutOfRange;break;
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_TogglePort+0xee>
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1c64:	85 e0       	ldi	r24, 0x05	; 5
    1c66:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <EEPROM_INIT>:
#include "INTERNAL_EEPROM.h"
#include "EEPROM_Registers.h"


void EEPROM_INIT()
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EECR_REG,2);
    1c80:	ac e2       	ldi	r26, 0x2C	; 44
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ec e2       	ldi	r30, 0x2C	; 44
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	84 60       	ori	r24, 0x04	; 4
    1c8c:	8c 93       	st	X, r24
	SET_BIT(EECR_REG,1);
    1c8e:	ac e2       	ldi	r26, 0x2C	; 44
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ec e2       	ldi	r30, 0x2C	; 44
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	82 60       	ori	r24, 0x02	; 2
    1c9a:	8c 93       	st	X, r24
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <EEPROM_WriteByte>:

void EEPROM_WriteByte(u16 Location,u8 Data)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <EEPROM_WriteByte+0x6>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	6b 83       	std	Y+3, r22	; 0x03
	CLR_BIT(SREG_REG,7);
    1cb4:	af e5       	ldi	r26, 0x5F	; 95
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ef e5       	ldi	r30, 0x5F	; 95
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 77       	andi	r24, 0x7F	; 127
    1cc0:	8c 93       	st	X, r24

	EEDR_REG = Data;
    1cc2:	ed e2       	ldi	r30, 0x2D	; 45
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	80 83       	st	Z, r24

	EEAR_REG = Location;
    1cca:	ee e3       	ldi	r30, 0x3E	; 62
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24

	SET_BIT(EECR_REG,2);
    1cd6:	ac e2       	ldi	r26, 0x2C	; 44
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ec e2       	ldi	r30, 0x2C	; 44
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	84 60       	ori	r24, 0x04	; 4
    1ce2:	8c 93       	st	X, r24

	SET_BIT(EECR_REG,1);
    1ce4:	ac e2       	ldi	r26, 0x2C	; 44
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	ec e2       	ldi	r30, 0x2C	; 44
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	8c 93       	st	X, r24

	SET_BIT(SREG_REG,7);
    1cf2:	af e5       	ldi	r26, 0x5F	; 95
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ef e5       	ldi	r30, 0x5F	; 95
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 68       	ori	r24, 0x80	; 128
    1cfe:	8c 93       	st	X, r24

	while(GET_BIT(EECR_REG,1) == 1);
    1d00:	ec e2       	ldi	r30, 0x2C	; 44
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	86 95       	lsr	r24
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	81 70       	andi	r24, 0x01	; 1
    1d0e:	90 70       	andi	r25, 0x00	; 0
    1d10:	88 23       	and	r24, r24
    1d12:	b1 f7       	brne	.-20     	; 0x1d00 <EEPROM_WriteByte+0x5e>
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <EEPROM_ReadByte>:


u8 	 EEPROM_ReadByte(u16 location)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <EEPROM_ReadByte+0x6>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(SREG_REG,7);
    1d2e:	af e5       	ldi	r26, 0x5F	; 95
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ef e5       	ldi	r30, 0x5F	; 95
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8f 77       	andi	r24, 0x7F	; 127
    1d3a:	8c 93       	st	X, r24

	EEAR_REG = location;
    1d3c:	ee e3       	ldi	r30, 0x3E	; 62
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24

	SET_BIT(EECR_REG,0);
    1d48:	ac e2       	ldi	r26, 0x2C	; 44
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ec e2       	ldi	r30, 0x2C	; 44
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	81 60       	ori	r24, 0x01	; 1
    1d54:	8c 93       	st	X, r24

	SET_BIT(SREG_REG,7);
    1d56:	af e5       	ldi	r26, 0x5F	; 95
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ef e5       	ldi	r30, 0x5F	; 95
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 68       	ori	r24, 0x80	; 128
    1d62:	8c 93       	st	X, r24

	return EEDR_REG;
    1d64:	ed e2       	ldi	r30, 0x2D	; 45
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <PhoneList_ADD>:
PhoneNum * head = NULL;

u8 CurrentLocation = 0;
u8 size = 0;
void PhoneList_ADD(u8 * Phonenum)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <PhoneList_ADD+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <PhoneList_ADD+0x8>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
	//Step 1===>Create Node
	PhoneNum * Temp = (PhoneNum*)malloc(sizeof(PhoneNum));
    1d84:	85 e0       	ldi	r24, 0x05	; 5
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 41 1b 	call	0x3682	; 0x3682 <malloc>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	//Step 2===>init value of the created node with the input function
	Temp->Number = Phonenum;
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
	Temp->Location = CurrentLocation;
    1d9c:	80 91 d6 03 	lds	r24, 0x03D6
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	82 83       	std	Z+2, r24	; 0x02
	CurrentLocation += sizeof(PhoneNum);
    1da6:	80 91 d6 03 	lds	r24, 0x03D6
    1daa:	8b 5f       	subi	r24, 0xFB	; 251
    1dac:	80 93 d6 03 	sts	0x03D6, r24
	//Step 3===>created node =>node implemented in head
	Temp->Next=head;
    1db0:	80 91 d4 03 	lds	r24, 0x03D4
    1db4:	90 91 d5 03 	lds	r25, 0x03D5
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	94 83       	std	Z+4, r25	; 0x04
    1dbe:	83 83       	std	Z+3, r24	; 0x03
	//Head =Temp
	head=Temp;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	90 93 d5 03 	sts	0x03D5, r25
    1dc8:	80 93 d4 03 	sts	0x03D4, r24
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <Add_to_eeprom>:



void Add_to_eeprom(u8 * Num)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	61 97       	sbiw	r28, 0x11	; 17
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	99 8b       	std	Y+17, r25	; 0x11
    1df0:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    1df2:	1f 86       	std	Y+15, r1	; 0x0f
    1df4:	8c c0       	rjmp	.+280    	; 0x1f0e <Add_to_eeprom+0x134>
	while(i<=11)
	{
		eeprom_write_byte((u8 *)(size),Num[i]);
    1df6:	80 91 d7 03 	lds	r24, 0x03D7
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	ac 01       	movw	r20, r24
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	88 89       	ldd	r24, Y+16	; 0x10
    1e08:	99 89       	ldd	r25, Y+17	; 0x11
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	20 81       	ld	r18, Z
    1e12:	ca 01       	movw	r24, r20
    1e14:	62 2f       	mov	r22, r18
    1e16:	0e 94 6f 1c 	call	0x38de	; 0x38de <__eewr_byte_m128>
		size++;
    1e1a:	80 91 d7 03 	lds	r24, 0x03D7
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	80 93 d7 03 	sts	0x03D7, r24
		i++;
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e2       	ldi	r26, 0x20	; 32
    1e30:	b1 e4       	ldi	r27, 0x41	; 65
    1e32:	8b 87       	std	Y+11, r24	; 0x0b
    1e34:	9c 87       	std	Y+12, r25	; 0x0c
    1e36:	ad 87       	std	Y+13, r26	; 0x0d
    1e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a e7       	ldi	r20, 0x7A	; 122
    1e48:	55 e4       	ldi	r21, 0x45	; 69
    1e4a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8f 83       	std	Y+7, r24	; 0x07
    1e54:	98 87       	std	Y+8, r25	; 0x08
    1e56:	a9 87       	std	Y+9, r26	; 0x09
    1e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <Add_to_eeprom+0xa2>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <Add_to_eeprom+0x120>
	else if (__tmp > 65535)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <Add_to_eeprom+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <Add_to_eeprom+0x102>
    1ebe:	80 e9       	ldi	r24, 0x90	; 144
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <Add_to_eeprom+0xf0>
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <Add_to_eeprom+0xe4>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <Add_to_eeprom+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <Add_to_eeprom+0x12c>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01


void Add_to_eeprom(u8 * Num)
{
	u8 i=0;
	while(i<=11)
    1f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f10:	8c 30       	cpi	r24, 0x0C	; 12
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <Add_to_eeprom+0x13c>
    1f14:	70 cf       	rjmp	.-288    	; 0x1df6 <Add_to_eeprom+0x1c>
		eeprom_write_byte((u8 *)(size),Num[i]);
		size++;
		i++;
		_delay_ms(10);
	}
}
    1f16:	61 96       	adiw	r28, 0x11	; 17
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <print_numbers>:

void print_numbers(void)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	0f 92       	push	r0
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0; i<size ;i++)
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	0a c0       	rjmp	.+20     	; 0x1f4a <print_numbers+0x22>
	{
			UART_SendByteSynch(eeprom_read_byte(i));
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__eerd_byte_m128>
    1f40:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
	}
}

void print_numbers(void)
{
	for(u8 i = 0; i<size ;i++)
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	8f 5f       	subi	r24, 0xFF	; 255
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	90 91 d7 03 	lds	r25, 0x03D7
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	89 17       	cp	r24, r25
    1f52:	88 f3       	brcs	.-30     	; 0x1f36 <print_numbers+0xe>
	{
			UART_SendByteSynch(eeprom_read_byte(i));
	}
}
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <SIM_voidSendCommand>:

u8 	SIM_u8Response[SIM_MAX_RESPONSE_LINES][SIM_MAX_RESPONSE_COLUMN] = {"0","0","0","0","0"};
u8 row = 0 , column = 0;

void SIM_voidSendCommand(u8 const *Copy_u8ATCommand)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <SIM_voidSendCommand+0x6>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ATCommand != NULL)
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	21 f0       	breq	.+8      	; 0x1f7a <SIM_voidSendCommand+0x1e>
	{
		UART_SendStringSync(Copy_u8ATCommand);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_SendStringSync>
	}

}
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <SIM_voidInit>:

void SIM_voidInit(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
//  MUX_voidSwitch(GSM);
//  USART_disableRXInterrupt();
	// USART_enuInit();
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <SIM_estCheckIfReady>:

ES_t SIM_estCheckIfReady(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	0f 92       	push	r0
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorState = ES_NOK ;
    1f9c:	19 82       	std	Y+1, r1	; 0x01
	SIM_voidSendCommand("AT\r");
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	//DIO_enuSetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
	Local_enuerrorState = SIM_estGetResponse();
    1fa6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    1faa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuerrorState;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <SIM_estCheckIfRegistered>:

ES_t SIM_estCheckIfRegistered(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorState = ES_NOK ;
    1fc0:	19 82       	std	Y+1, r1	; 0x01

	if(SIM_estCheckIfReady() == ES_OK)
    1fc2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <SIM_estCheckIfReady>
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	a9 f4       	brne	.+42     	; 0x1ff4 <SIM_estCheckIfRegistered+0x3e>
	{

		//DIO_enuSetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
		SIM_voidSendCommand("AT+CREG?\r");
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
    1fce:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
		if(SIM_estGetResponse() == ES_OK)
    1fd2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	69 f4       	brne	.+26     	; 0x1ff4 <SIM_estCheckIfRegistered+0x3e>
		{

			if(strstr(SIM_u8Response[SIM_RESPONSE_LINE_2] , "+CREG: 0,1"))
    1fda:	8f ed       	ldi	r24, 0xDF	; 223
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	8c 59       	subi	r24, 0x9C	; 156
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	2e e0       	ldi	r18, 0x0E	; 14
    1fe4:	31 e0       	ldi	r19, 0x01	; 1
    1fe6:	b9 01       	movw	r22, r18
    1fe8:	0e 94 4d 1c 	call	0x389a	; 0x389a <strstr>
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	11 f0       	breq	.+4      	; 0x1ff4 <SIM_estCheckIfRegistered+0x3e>
			{
				Local_enuerrorState = ES_OK;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return Local_enuerrorState;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <SIM_estGetResponse>:

ES_t SIM_estGetResponse(void)
{
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	0f 92       	push	r0
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2010:	10 92 d8 03 	sts	0x03D8, r1
    2014:	1d c0       	rjmp	.+58     	; 0x2050 <SIM_estGetResponse+0x52>
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
    2016:	4f ed       	ldi	r20, 0xDF	; 223
    2018:	51 e0       	ldi	r21, 0x01	; 1
    201a:	80 91 d8 03 	lds	r24, 0x03D8
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	84 e6       	ldi	r24, 0x64	; 100
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	bc 01       	movw	r22, r24
    2028:	26 9f       	mul	r18, r22
    202a:	c0 01       	movw	r24, r0
    202c:	27 9f       	mul	r18, r23
    202e:	90 0d       	add	r25, r0
    2030:	36 9f       	mul	r19, r22
    2032:	90 0d       	add	r25, r0
    2034:	11 24       	eor	r1, r1
    2036:	84 0f       	add	r24, r20
    2038:	95 1f       	adc	r25, r21
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	44 e6       	ldi	r20, 0x64	; 100
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	0e 94 46 1c 	call	0x388c	; 0x388c <memset>
	return Local_enuerrorState;
}

ES_t SIM_estGetResponse(void)
{
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2046:	80 91 d8 03 	lds	r24, 0x03D8
    204a:	8f 5f       	subi	r24, 0xFF	; 255
    204c:	80 93 d8 03 	sts	0x03D8, r24
    2050:	80 91 d8 03 	lds	r24, 0x03D8
    2054:	85 30       	cpi	r24, 0x05	; 5
    2056:	f8 f2       	brcs	.-66     	; 0x2016 <SIM_estGetResponse+0x18>
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
    2058:	19 82       	std	Y+1, r1	; 0x01
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    205a:	10 92 d8 03 	sts	0x03D8, r1
    205e:	7d c0       	rjmp	.+250    	; 0x215a <SIM_estGetResponse+0x15c>
	{
		for(column = SIM_RESPONSE_COLUMN_1 ; column < SIM_MAX_RESPONSE_COLUMN ; column++)
    2060:	10 92 d9 03 	sts	0x03D9, r1
    2064:	39 c0       	rjmp	.+114    	; 0x20d8 <SIM_estGetResponse+0xda>
		{

			SIM_u8Response[row][column] = UART_ReceiveByteSynch();
    2066:	80 91 d8 03 	lds	r24, 0x03D8
    206a:	e8 2e       	mov	r14, r24
    206c:	ff 24       	eor	r15, r15
    206e:	80 91 d9 03 	lds	r24, 0x03D9
    2072:	08 2f       	mov	r16, r24
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	0e 94 49 19 	call	0x3292	; 0x3292 <UART_ReceiveByteSynch>
    207a:	28 2f       	mov	r18, r24
    207c:	84 e6       	ldi	r24, 0x64	; 100
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	ac 01       	movw	r20, r24
    2082:	e4 9e       	mul	r14, r20
    2084:	c0 01       	movw	r24, r0
    2086:	e5 9e       	mul	r14, r21
    2088:	90 0d       	add	r25, r0
    208a:	f4 9e       	mul	r15, r20
    208c:	90 0d       	add	r25, r0
    208e:	11 24       	eor	r1, r1
    2090:	80 0f       	add	r24, r16
    2092:	91 1f       	adc	r25, r17
    2094:	fc 01       	movw	r30, r24
    2096:	e1 52       	subi	r30, 0x21	; 33
    2098:	fe 4f       	sbci	r31, 0xFE	; 254
    209a:	20 83       	st	Z, r18
			if(strstr(SIM_u8Response[row] , "\r\n"))
    209c:	4f ed       	ldi	r20, 0xDF	; 223
    209e:	51 e0       	ldi	r21, 0x01	; 1
    20a0:	80 91 d8 03 	lds	r24, 0x03D8
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	84 e6       	ldi	r24, 0x64	; 100
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	bc 01       	movw	r22, r24
    20ae:	26 9f       	mul	r18, r22
    20b0:	c0 01       	movw	r24, r0
    20b2:	27 9f       	mul	r18, r23
    20b4:	90 0d       	add	r25, r0
    20b6:	36 9f       	mul	r19, r22
    20b8:	90 0d       	add	r25, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	84 0f       	add	r24, r20
    20be:	95 1f       	adc	r25, r21
    20c0:	29 e1       	ldi	r18, 0x19	; 25
    20c2:	31 e0       	ldi	r19, 0x01	; 1
    20c4:	b9 01       	movw	r22, r18
    20c6:	0e 94 4d 1c 	call	0x389a	; 0x389a <strstr>
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	49 f4       	brne	.+18     	; 0x20e0 <SIM_estGetResponse+0xe2>
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
	{
		for(column = SIM_RESPONSE_COLUMN_1 ; column < SIM_MAX_RESPONSE_COLUMN ; column++)
    20ce:	80 91 d9 03 	lds	r24, 0x03D9
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	80 93 d9 03 	sts	0x03D9, r24
    20d8:	80 91 d9 03 	lds	r24, 0x03D9
    20dc:	84 36       	cpi	r24, 0x64	; 100
    20de:	18 f2       	brcs	.-122    	; 0x2066 <SIM_estGetResponse+0x68>
			if(strstr(SIM_u8Response[row] , "\r\n"))
			{
				break;
			}
		}
		if(strstr(SIM_u8Response[row] , "OK\r\n"))
    20e0:	4f ed       	ldi	r20, 0xDF	; 223
    20e2:	51 e0       	ldi	r21, 0x01	; 1
    20e4:	80 91 d8 03 	lds	r24, 0x03D8
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	84 e6       	ldi	r24, 0x64	; 100
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	bc 01       	movw	r22, r24
    20f2:	26 9f       	mul	r18, r22
    20f4:	c0 01       	movw	r24, r0
    20f6:	27 9f       	mul	r18, r23
    20f8:	90 0d       	add	r25, r0
    20fa:	36 9f       	mul	r19, r22
    20fc:	90 0d       	add	r25, r0
    20fe:	11 24       	eor	r1, r1
    2100:	84 0f       	add	r24, r20
    2102:	95 1f       	adc	r25, r21
    2104:	2c e1       	ldi	r18, 0x1C	; 28
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 4d 1c 	call	0x389a	; 0x389a <strstr>
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	19 f0       	breq	.+6      	; 0x2118 <SIM_estGetResponse+0x11a>
		{

			Local_enuerrorState = ES_OK;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	26 c0       	rjmp	.+76     	; 0x2164 <SIM_estGetResponse+0x166>
			break;
		}
		else if(strstr(SIM_u8Response[row] , "ERROR\r\n"))
    2118:	4f ed       	ldi	r20, 0xDF	; 223
    211a:	51 e0       	ldi	r21, 0x01	; 1
    211c:	80 91 d8 03 	lds	r24, 0x03D8
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	84 e6       	ldi	r24, 0x64	; 100
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	26 9f       	mul	r18, r22
    212c:	c0 01       	movw	r24, r0
    212e:	27 9f       	mul	r18, r23
    2130:	90 0d       	add	r25, r0
    2132:	36 9f       	mul	r19, r22
    2134:	90 0d       	add	r25, r0
    2136:	11 24       	eor	r1, r1
    2138:	84 0f       	add	r24, r20
    213a:	95 1f       	adc	r25, r21
    213c:	21 e2       	ldi	r18, 0x21	; 33
    213e:	31 e0       	ldi	r19, 0x01	; 1
    2140:	b9 01       	movw	r22, r18
    2142:	0e 94 4d 1c 	call	0x389a	; 0x389a <strstr>
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	19 f0       	breq	.+6      	; 0x2150 <SIM_estGetResponse+0x152>
		{

			Local_enuerrorState = ES_ERROR;
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <SIM_estGetResponse+0x166>
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2150:	80 91 d8 03 	lds	r24, 0x03D8
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	80 93 d8 03 	sts	0x03D8, r24
    215a:	80 91 d8 03 	lds	r24, 0x03D8
    215e:	85 30       	cpi	r24, 0x05	; 5
    2160:	08 f4       	brcc	.+2      	; 0x2164 <SIM_estGetResponse+0x166>
    2162:	7e cf       	rjmp	.-260    	; 0x2060 <SIM_estGetResponse+0x62>
			break;
		}

	}

	return Local_enuerrorState;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	08 95       	ret

00002176 <SIM_estSendSMS>:

ES_t SIM_estSendSMS(u8 *Copy_u8PhoneNumber, u8 *Copy_u8SMS)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	ed 97       	sbiw	r28, 0x3d	; 61
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	9b af       	std	Y+59, r25	; 0x3b
    218c:	8a af       	std	Y+58, r24	; 0x3a
    218e:	7d af       	std	Y+61, r23	; 0x3d
    2190:	6c af       	std	Y+60, r22	; 0x3c
	ES_t Local_enuerrorState = ES_NOK ;
    2192:	19 ae       	std	Y+57, r1	; 0x39
	if((Copy_u8PhoneNumber != NULL) && (Copy_u8SMS != NULL))
    2194:	8a ad       	ldd	r24, Y+58	; 0x3a
    2196:	9b ad       	ldd	r25, Y+59	; 0x3b
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	09 f4       	brne	.+2      	; 0x219e <SIM_estSendSMS+0x28>
    219c:	f3 c1       	rjmp	.+998    	; 0x2584 <SIM_estSendSMS+0x40e>
    219e:	8c ad       	ldd	r24, Y+60	; 0x3c
    21a0:	9d ad       	ldd	r25, Y+61	; 0x3d
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <SIM_estSendSMS+0x32>
    21a6:	ee c1       	rjmp	.+988    	; 0x2584 <SIM_estSendSMS+0x40e>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    21a8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <SIM_estCheckIfReady>
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <SIM_estSendSMS+0x3c>
    21b0:	eb c1       	rjmp	.+982    	; 0x2588 <SIM_estSendSMS+0x412>
		{
			SIM_voidSendCommand("AT+CMGF=1\r");
    21b2:	89 e2       	ldi	r24, 0x29	; 41
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	aa e7       	ldi	r26, 0x7A	; 122
    21c0:	b4 e4       	ldi	r27, 0x44	; 68
    21c2:	8d ab       	std	Y+53, r24	; 0x35
    21c4:	9e ab       	std	Y+54, r25	; 0x36
    21c6:	af ab       	std	Y+55, r26	; 0x37
    21c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6d a9       	ldd	r22, Y+53	; 0x35
    21cc:	7e a9       	ldd	r23, Y+54	; 0x36
    21ce:	8f a9       	ldd	r24, Y+55	; 0x37
    21d0:	98 ad       	ldd	r25, Y+56	; 0x38
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	55 e4       	ldi	r21, 0x45	; 69
    21da:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	89 ab       	std	Y+49, r24	; 0x31
    21e4:	9a ab       	std	Y+50, r25	; 0x32
    21e6:	ab ab       	std	Y+51, r26	; 0x33
    21e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <SIM_estSendSMS+0x96>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	98 ab       	std	Y+48, r25	; 0x30
    2208:	8f a7       	std	Y+47, r24	; 0x2f
    220a:	3f c0       	rjmp	.+126    	; 0x228a <SIM_estSendSMS+0x114>
	else if (__tmp > 65535)
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <SIM_estSendSMS+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6d a9       	ldd	r22, Y+53	; 0x35
    2226:	7e a9       	ldd	r23, Y+54	; 0x36
    2228:	8f a9       	ldd	r24, Y+55	; 0x37
    222a:	98 ad       	ldd	r25, Y+56	; 0x38
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
    224c:	0f c0       	rjmp	.+30     	; 0x226c <SIM_estSendSMS+0xf6>
    224e:	80 e9       	ldi	r24, 0x90	; 144
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	9e a7       	std	Y+46, r25	; 0x2e
    2254:	8d a7       	std	Y+45, r24	; 0x2d
    2256:	8d a5       	ldd	r24, Y+45	; 0x2d
    2258:	9e a5       	ldd	r25, Y+46	; 0x2e
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <SIM_estSendSMS+0xe4>
    225e:	9e a7       	std	Y+46, r25	; 0x2e
    2260:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8f a5       	ldd	r24, Y+47	; 0x2f
    2264:	98 a9       	ldd	r25, Y+48	; 0x30
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <SIM_estSendSMS+0xd8>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <SIM_estSendSMS+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	69 a9       	ldd	r22, Y+49	; 0x31
    2278:	7a a9       	ldd	r23, Y+50	; 0x32
    227a:	8b a9       	ldd	r24, Y+51	; 0x33
    227c:	9c a9       	ldd	r25, Y+52	; 0x34
    227e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	98 ab       	std	Y+48, r25	; 0x30
    2288:	8f a7       	std	Y+47, r24	; 0x2f
    228a:	8f a5       	ldd	r24, Y+47	; 0x2f
    228c:	98 a9       	ldd	r25, Y+48	; 0x30
    228e:	9c a7       	std	Y+44, r25	; 0x2c
    2290:	8b a7       	std	Y+43, r24	; 0x2b
    2292:	8b a5       	ldd	r24, Y+43	; 0x2b
    2294:	9c a5       	ldd	r25, Y+44	; 0x2c
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <SIM_estSendSMS+0x120>
    229a:	9c a7       	std	Y+44, r25	; 0x2c
    229c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			if(SIM_estGetResponse() == ES_OK)
    229e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <SIM_estSendSMS+0x132>
    22a6:	70 c1       	rjmp	.+736    	; 0x2588 <SIM_estSendSMS+0x412>
			{
				SIM_voidSendCommand("AT+CMGS=\"");
    22a8:	84 e3       	ldi	r24, 0x34	; 52
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    22b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    22b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    22b4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand("\"\r");
    22b8:	8e e3       	ldi	r24, 0x3E	; 62
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	aa e7       	ldi	r26, 0x7A	; 122
    22c6:	b4 e4       	ldi	r27, 0x44	; 68
    22c8:	8f a3       	std	Y+39, r24	; 0x27
    22ca:	98 a7       	std	Y+40, r25	; 0x28
    22cc:	a9 a7       	std	Y+41, r26	; 0x29
    22ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	6f a1       	ldd	r22, Y+39	; 0x27
    22d2:	78 a5       	ldd	r23, Y+40	; 0x28
    22d4:	89 a5       	ldd	r24, Y+41	; 0x29
    22d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	55 e4       	ldi	r21, 0x45	; 69
    22e0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8b a3       	std	Y+35, r24	; 0x23
    22ea:	9c a3       	std	Y+36, r25	; 0x24
    22ec:	ad a3       	std	Y+37, r26	; 0x25
    22ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <SIM_estSendSMS+0x19c>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9a a3       	std	Y+34, r25	; 0x22
    230e:	89 a3       	std	Y+33, r24	; 0x21
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <SIM_estSendSMS+0x21a>
	else if (__tmp > 65535)
    2312:	6b a1       	ldd	r22, Y+35	; 0x23
    2314:	7c a1       	ldd	r23, Y+36	; 0x24
    2316:	8d a1       	ldd	r24, Y+37	; 0x25
    2318:	9e a1       	ldd	r25, Y+38	; 0x26
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <SIM_estSendSMS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	6f a1       	ldd	r22, Y+39	; 0x27
    232c:	78 a5       	ldd	r23, Y+40	; 0x28
    232e:	89 a5       	ldd	r24, Y+41	; 0x29
    2330:	9a a5       	ldd	r25, Y+42	; 0x2a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9a a3       	std	Y+34, r25	; 0x22
    2350:	89 a3       	std	Y+33, r24	; 0x21
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <SIM_estSendSMS+0x1fc>
    2354:	80 e9       	ldi	r24, 0x90	; 144
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	98 a3       	std	Y+32, r25	; 0x20
    235a:	8f 8f       	std	Y+31, r24	; 0x1f
    235c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235e:	98 a1       	ldd	r25, Y+32	; 0x20
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <SIM_estSendSMS+0x1ea>
    2364:	98 a3       	std	Y+32, r25	; 0x20
    2366:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9a a3       	std	Y+34, r25	; 0x22
    2370:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	9a a1       	ldd	r25, Y+34	; 0x22
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <SIM_estSendSMS+0x1de>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <SIM_estSendSMS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	6b a1       	ldd	r22, Y+35	; 0x23
    237e:	7c a1       	ldd	r23, Y+36	; 0x24
    2380:	8d a1       	ldd	r24, Y+37	; 0x25
    2382:	9e a1       	ldd	r25, Y+38	; 0x26
    2384:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9a a3       	std	Y+34, r25	; 0x22
    238e:	89 a3       	std	Y+33, r24	; 0x21
    2390:	89 a1       	ldd	r24, Y+33	; 0x21
    2392:	9a a1       	ldd	r25, Y+34	; 0x22
    2394:	9e 8f       	std	Y+30, r25	; 0x1e
    2396:	8d 8f       	std	Y+29, r24	; 0x1d
    2398:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <SIM_estSendSMS+0x226>
    23a0:	9e 8f       	std	Y+30, r25	; 0x1e
    23a2:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				SIM_voidSendCommand(Copy_u8SMS);
    23a4:	8c ad       	ldd	r24, Y+60	; 0x3c
    23a6:	9d ad       	ldd	r25, Y+61	; 0x3d
    23a8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a8 ec       	ldi	r26, 0xC8	; 200
    23b2:	b2 e4       	ldi	r27, 0x42	; 66
    23b4:	89 8f       	std	Y+25, r24	; 0x19
    23b6:	9a 8f       	std	Y+26, r25	; 0x1a
    23b8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	69 8d       	ldd	r22, Y+25	; 0x19
    23be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8d 8b       	std	Y+21, r24	; 0x15
    23d6:	9e 8b       	std	Y+22, r25	; 0x16
    23d8:	af 8b       	std	Y+23, r26	; 0x17
    23da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	2c f4       	brge	.+10     	; 0x23fe <SIM_estSendSMS+0x288>
		__ticks = 1;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	3f c0       	rjmp	.+126    	; 0x247c <SIM_estSendSMS+0x306>
	else if (__tmp > 65535)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	4c f5       	brge	.+82     	; 0x2468 <SIM_estSendSMS+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	0f c0       	rjmp	.+30     	; 0x245e <SIM_estSendSMS+0x2e8>
    2440:	80 e9       	ldi	r24, 0x90	; 144
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <SIM_estSendSMS+0x2d6>
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	69 f7       	brne	.-38     	; 0x2440 <SIM_estSendSMS+0x2ca>
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <SIM_estSendSMS+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	98 89       	ldd	r25, Y+16	; 0x10
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <SIM_estSendSMS+0x312>
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				SIM_voidSendCommand("\r");
    2490:	81 e4       	ldi	r24, 0x41	; 65
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	aa e7       	ldi	r26, 0x7A	; 122
    249e:	b4 e4       	ldi	r27, 0x44	; 68
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	9c 87       	std	Y+12, r25	; 0x0c
    24a4:	ad 87       	std	Y+13, r26	; 0x0d
    24a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	55 e4       	ldi	r21, 0x45	; 69
    24b8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8f 83       	std	Y+7, r24	; 0x07
    24c2:	98 87       	std	Y+8, r25	; 0x08
    24c4:	a9 87       	std	Y+9, r26	; 0x09
    24c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <SIM_estSendSMS+0x374>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <SIM_estSendSMS+0x3f2>
	else if (__tmp > 65535)
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <SIM_estSendSMS+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	0f c0       	rjmp	.+30     	; 0x254a <SIM_estSendSMS+0x3d4>
    252c:	80 e9       	ldi	r24, 0x90	; 144
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <SIM_estSendSMS+0x3c2>
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <SIM_estSendSMS+0x3b6>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <SIM_estSendSMS+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <SIM_estSendSMS+0x3fe>
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Local_enuerrorState = SIM_estGetResponse();
    257c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    2580:	89 af       	std	Y+57, r24	; 0x39
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <SIM_estSendSMS+0x412>
			}
		}
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	89 af       	std	Y+57, r24	; 0x39
	}
	return Local_enuerrorState;
    2588:	89 ad       	ldd	r24, Y+57	; 0x39
}
    258a:	ed 96       	adiw	r28, 0x3d	; 61
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <SIM_estSendLocation>:

ES_t SIM_estSendLocation(u8 *Copy_u8PhoneNumber, u8 *Copy_u8Latitude, u8 *Copy_u8Longitude)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	65 97       	sbiw	r28, 0x15	; 21
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	99 8b       	std	Y+17, r25	; 0x11
    25b2:	88 8b       	std	Y+16, r24	; 0x10
    25b4:	7b 8b       	std	Y+19, r23	; 0x13
    25b6:	6a 8b       	std	Y+18, r22	; 0x12
    25b8:	5d 8b       	std	Y+21, r21	; 0x15
    25ba:	4c 8b       	std	Y+20, r20	; 0x14
	ES_t Local_enuerrorState = ES_NOK ;
    25bc:	1f 86       	std	Y+15, r1	; 0x0f
	if((Copy_u8PhoneNumber != NULL) && (Copy_u8Latitude != NULL) && (Copy_u8Longitude != NULL))
    25be:	88 89       	ldd	r24, Y+16	; 0x10
    25c0:	99 89       	ldd	r25, Y+17	; 0x11
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <SIM_estSendLocation+0x2c>
    25c6:	ae c0       	rjmp	.+348    	; 0x2724 <SIM_estSendLocation+0x188>
    25c8:	8a 89       	ldd	r24, Y+18	; 0x12
    25ca:	9b 89       	ldd	r25, Y+19	; 0x13
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <SIM_estSendLocation+0x36>
    25d0:	a9 c0       	rjmp	.+338    	; 0x2724 <SIM_estSendLocation+0x188>
    25d2:	8c 89       	ldd	r24, Y+20	; 0x14
    25d4:	9d 89       	ldd	r25, Y+21	; 0x15
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	09 f4       	brne	.+2      	; 0x25dc <SIM_estSendLocation+0x40>
    25da:	a4 c0       	rjmp	.+328    	; 0x2724 <SIM_estSendLocation+0x188>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    25dc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <SIM_estCheckIfReady>
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <SIM_estSendLocation+0x4a>
    25e4:	a1 c0       	rjmp	.+322    	; 0x2728 <SIM_estSendLocation+0x18c>
		{
			SIM_voidSendCommand("AT+CMGF=1\r");
    25e6:	89 e2       	ldi	r24, 0x29	; 41
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
			if(SIM_estGetResponse() == ES_OK)
    25ee:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <SIM_estSendLocation+0x5c>
    25f6:	98 c0       	rjmp	.+304    	; 0x2728 <SIM_estSendLocation+0x18c>
			{
				SIM_voidSendCommand("AT+CMGS=\"");
    25f8:	84 e3       	ldi	r24, 0x34	; 52
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    2600:	88 89       	ldd	r24, Y+16	; 0x10
    2602:	99 89       	ldd	r25, Y+17	; 0x11
    2604:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand("\"\r");
    2608:	8e e3       	ldi	r24, 0x3E	; 62
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e2       	ldi	r26, 0x20	; 32
    2616:	b1 e4       	ldi	r27, 0x41	; 65
    2618:	8b 87       	std	Y+11, r24	; 0x0b
    261a:	9c 87       	std	Y+12, r25	; 0x0c
    261c:	ad 87       	std	Y+13, r26	; 0x0d
    261e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a e7       	ldi	r20, 0x7A	; 122
    262e:	55 e4       	ldi	r21, 0x45	; 69
    2630:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	98 87       	std	Y+8, r25	; 0x08
    263c:	a9 87       	std	Y+9, r26	; 0x09
    263e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <SIM_estSendLocation+0xc6>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <SIM_estSendLocation+0x144>
	else if (__tmp > 65535)
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <SIM_estSendLocation+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <SIM_estSendLocation+0x126>
    26a4:	80 e9       	ldi	r24, 0x90	; 144
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <SIM_estSendLocation+0x114>
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <SIM_estSendLocation+0x108>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <SIM_estSendLocation+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <SIM_estSendLocation+0x150>
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10); //https://maps.go[dot]ogle.com/?q=
				//https://maps.google.com/?q=30.3052624,31.7730866&z=30
				SIM_voidSendCommand("Please delete \"[dot]\" form the link below then open it.\rhttps://maps.go[dot]ogle.com/?q="); //https://www.google.com/maps/dir/?api=1&parameters
    26f4:	84 e4       	ldi	r24, 0x44	; 68
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8Latitude);
    26fc:	8a 89       	ldd	r24, Y+18	; 0x12
    26fe:	9b 89       	ldd	r25, Y+19	; 0x13
    2700:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(",");
    2704:	8d e9       	ldi	r24, 0x9D	; 157
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8Longitude);
    270c:	8c 89       	ldd	r24, Y+20	; 0x14
    270e:	9d 89       	ldd	r25, Y+21	; 0x15
    2710:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand("\r");
    2714:	81 e4       	ldi	r24, 0x41	; 65
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				Local_enuerrorState = SIM_estGetResponse();
    271c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    2720:	8f 87       	std	Y+15, r24	; 0x0f
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <SIM_estSendLocation+0x18c>
			}
		}
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return Local_enuerrorState;
    2728:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    272a:	65 96       	adiw	r28, 0x15	; 21
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <SIM_estMakeCall>:

ES_t SIM_estMakeCall(u8 *Copy_u8PhoneNumber)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <SIM_estMakeCall+0x6>
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	9b 83       	std	Y+3, r25	; 0x03
    274a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    274c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PhoneNumber != NULL)
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	e1 f0       	breq	.+56     	; 0x278e <SIM_estMakeCall+0x52>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    2756:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <SIM_estCheckIfReady>
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	a1 f4       	brne	.+40     	; 0x2786 <SIM_estMakeCall+0x4a>
		{
			SIM_voidSendCommand("AT+CMGF=0\r");
    275e:	8f e9       	ldi	r24, 0x9F	; 159
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
			if(SIM_estGetResponse() == ES_OK)
    2766:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	61 f4       	brne	.+24     	; 0x2786 <SIM_estMakeCall+0x4a>
			{
				SIM_voidSendCommand("ATD");
    276e:	8a ea       	ldi	r24, 0xAA	; 170
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	9b 81       	ldd	r25, Y+3	; 0x03
    277a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
				SIM_voidSendCommand(";\r\n");
    277e:	8e ea       	ldi	r24, 0xAE	; 174
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
			}
		}

		Local_enuerrorState = SIM_estGetResponse();
    2786:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SIM_estGetResponse>
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <SIM_estMakeCall+0x56>
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    278e:	83 e0       	ldi	r24, 0x03	; 3
    2790:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuerrorState;
    2792:	89 81       	ldd	r24, Y+1	; 0x01
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <SIM_SendSMS>:

void SIM_SendSMS(u8 const *Copy_u8PhoneNumber, u8 const *Copy_u8SMS)
{
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	c8 55       	subi	r28, 0x58	; 88
    27ae:	d0 40       	sbci	r29, 0x00	; 0
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	fe 01       	movw	r30, r28
    27bc:	eb 5a       	subi	r30, 0xAB	; 171
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	fe 01       	movw	r30, r28
    27c6:	e9 5a       	subi	r30, 0xA9	; 169
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	71 83       	std	Z+1, r23	; 0x01
    27cc:	60 83       	st	Z, r22
	SIM_voidSendCommand("AT+CMGF=1\r");
    27ce:	89 e2       	ldi	r24, 0x29	; 41
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    27d6:	8a e0       	ldi	r24, 0x0A	; 10
    27d8:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    27dc:	fe 01       	movw	r30, r28
    27de:	ef 5a       	subi	r30, 0xAF	; 175
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a8 ec       	ldi	r26, 0xC8	; 200
    27e8:	b2 e4       	ldi	r27, 0x42	; 66
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	8e 01       	movw	r16, r28
    27f4:	03 5b       	subi	r16, 0xB3	; 179
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	ef 5a       	subi	r30, 0xAF	; 175
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a e7       	ldi	r20, 0x7A	; 122
    280c:	55 e4       	ldi	r21, 0x45	; 69
    280e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2820:	fe 01       	movw	r30, r28
    2822:	e3 5b       	subi	r30, 0xB3	; 179
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	44 f4       	brge	.+16     	; 0x284e <SIM_SendSMS+0xae>
		__ticks = 1;
    283e:	fe 01       	movw	r30, r28
    2840:	e5 5b       	subi	r30, 0xB5	; 181
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	64 c0       	rjmp	.+200    	; 0x2916 <SIM_SendSMS+0x176>
	else if (__tmp > 65535)
    284e:	fe 01       	movw	r30, r28
    2850:	e3 5b       	subi	r30, 0xB3	; 179
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	0c f0       	brlt	.+2      	; 0x286e <SIM_SendSMS+0xce>
    286c:	43 c0       	rjmp	.+134    	; 0x28f4 <SIM_SendSMS+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	fe 01       	movw	r30, r28
    2870:	ef 5a       	subi	r30, 0xAF	; 175
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8e 01       	movw	r16, r28
    288e:	05 5b       	subi	r16, 0xB5	; 181
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	f8 01       	movw	r30, r16
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
    28a4:	1f c0       	rjmp	.+62     	; 0x28e4 <SIM_SendSMS+0x144>
    28a6:	fe 01       	movw	r30, r28
    28a8:	e7 5b       	subi	r30, 0xB7	; 183
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 e9       	ldi	r24, 0x90	; 144
    28ae:	91 e0       	ldi	r25, 0x01	; 1
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	fe 01       	movw	r30, r28
    28b6:	e7 5b       	subi	r30, 0xB7	; 183
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <SIM_SendSMS+0x11e>
    28c2:	fe 01       	movw	r30, r28
    28c4:	e7 5b       	subi	r30, 0xB7	; 183
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	de 01       	movw	r26, r28
    28ce:	a5 5b       	subi	r26, 0xB5	; 181
    28d0:	bf 4f       	sbci	r27, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	e5 5b       	subi	r30, 0xB5	; 181
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	11 96       	adiw	r26, 0x01	; 1
    28e0:	9c 93       	st	X, r25
    28e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	fe 01       	movw	r30, r28
    28e6:	e5 5b       	subi	r30, 0xB5	; 181
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	d1 f6       	brne	.-76     	; 0x28a6 <SIM_SendSMS+0x106>
    28f2:	27 c0       	rjmp	.+78     	; 0x2942 <SIM_SendSMS+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f4:	8e 01       	movw	r16, r28
    28f6:	05 5b       	subi	r16, 0xB5	; 181
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	e3 5b       	subi	r30, 0xB3	; 179
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	f8 01       	movw	r30, r16
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
    2916:	de 01       	movw	r26, r28
    2918:	a9 5b       	subi	r26, 0xB9	; 185
    291a:	bf 4f       	sbci	r27, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	e5 5b       	subi	r30, 0xB5	; 181
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	8d 93       	st	X+, r24
    2928:	9c 93       	st	X, r25
    292a:	fe 01       	movw	r30, r28
    292c:	e9 5b       	subi	r30, 0xB9	; 185
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <SIM_SendSMS+0x194>
    2938:	fe 01       	movw	r30, r28
    293a:	e9 5b       	subi	r30, 0xB9	; 185
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
	_delay_ms(100);
	SIM_voidSendCommand("AT+CMGS=\"");
    2942:	84 e3       	ldi	r24, 0x34	; 52
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    294a:	8a e0       	ldi	r24, 0x0A	; 10
    294c:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    2950:	fe 01       	movw	r30, r28
    2952:	ed 5b       	subi	r30, 0xBD	; 189
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a8 ec       	ldi	r26, 0xC8	; 200
    295c:	b2 e4       	ldi	r27, 0x42	; 66
    295e:	80 83       	st	Z, r24
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	a2 83       	std	Z+2, r26	; 0x02
    2964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	8e 01       	movw	r16, r28
    2968:	01 5c       	subi	r16, 0xC1	; 193
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	ed 5b       	subi	r30, 0xBD	; 189
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a e7       	ldi	r20, 0x7A	; 122
    2980:	55 e4       	ldi	r21, 0x45	; 69
    2982:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	80 83       	st	Z, r24
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	a2 83       	std	Z+2, r26	; 0x02
    2992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2994:	fe 01       	movw	r30, r28
    2996:	ff 96       	adiw	r30, 0x3f	; 63
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	2c f4       	brge	.+10     	; 0x29ba <SIM_SendSMS+0x21a>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9e af       	std	Y+62, r25	; 0x3e
    29b6:	8d af       	std	Y+61, r24	; 0x3d
    29b8:	46 c0       	rjmp	.+140    	; 0x2a46 <SIM_SendSMS+0x2a6>
	else if (__tmp > 65535)
    29ba:	fe 01       	movw	r30, r28
    29bc:	ff 96       	adiw	r30, 0x3f	; 63
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	64 f5       	brge	.+88     	; 0x2a2e <SIM_SendSMS+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	fe 01       	movw	r30, r28
    29d8:	ed 5b       	subi	r30, 0xBD	; 189
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e af       	std	Y+62, r25	; 0x3e
    2a02:	8d af       	std	Y+61, r24	; 0x3d
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <SIM_SendSMS+0x284>
    2a06:	80 e9       	ldi	r24, 0x90	; 144
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	9c af       	std	Y+60, r25	; 0x3c
    2a0c:	8b af       	std	Y+59, r24	; 0x3b
    2a0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <SIM_SendSMS+0x272>
    2a16:	9c af       	std	Y+60, r25	; 0x3c
    2a18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9e af       	std	Y+62, r25	; 0x3e
    2a22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	69 f7       	brne	.-38     	; 0x2a06 <SIM_SendSMS+0x266>
    2a2c:	16 c0       	rjmp	.+44     	; 0x2a5a <SIM_SendSMS+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ff 96       	adiw	r30, 0x3f	; 63
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e af       	std	Y+62, r25	; 0x3e
    2a44:	8d af       	std	Y+61, r24	; 0x3d
    2a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a4a:	9a af       	std	Y+58, r25	; 0x3a
    2a4c:	89 af       	std	Y+57, r24	; 0x39
    2a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <SIM_SendSMS+0x2b2>
    2a56:	9a af       	std	Y+58, r25	; 0x3a
    2a58:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	SIM_voidSendCommand(Copy_u8PhoneNumber);
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	eb 5a       	subi	r30, 0xAB	; 171
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    2a68:	8a e0       	ldi	r24, 0x0A	; 10
    2a6a:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a8 ec       	ldi	r26, 0xC8	; 200
    2a74:	b2 e4       	ldi	r27, 0x42	; 66
    2a76:	8d ab       	std	Y+53, r24	; 0x35
    2a78:	9e ab       	std	Y+54, r25	; 0x36
    2a7a:	af ab       	std	Y+55, r26	; 0x37
    2a7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a80:	7e a9       	ldd	r23, Y+54	; 0x36
    2a82:	8f a9       	ldd	r24, Y+55	; 0x37
    2a84:	98 ad       	ldd	r25, Y+56	; 0x38
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a e7       	ldi	r20, 0x7A	; 122
    2a8c:	55 e4       	ldi	r21, 0x45	; 69
    2a8e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	89 ab       	std	Y+49, r24	; 0x31
    2a98:	9a ab       	std	Y+50, r25	; 0x32
    2a9a:	ab ab       	std	Y+51, r26	; 0x33
    2a9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <SIM_SendSMS+0x320>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <SIM_SendSMS+0x39e>
	else if (__tmp > 65535)
    2ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <SIM_SendSMS+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ada:	7e a9       	ldd	r23, Y+54	; 0x36
    2adc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ade:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	98 ab       	std	Y+48, r25	; 0x30
    2afe:	8f a7       	std	Y+47, r24	; 0x2f
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <SIM_SendSMS+0x380>
    2b02:	80 e9       	ldi	r24, 0x90	; 144
    2b04:	91 e0       	ldi	r25, 0x01	; 1
    2b06:	9e a7       	std	Y+46, r25	; 0x2e
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
    2b0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <SIM_SendSMS+0x36e>
    2b12:	9e a7       	std	Y+46, r25	; 0x2e
    2b14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	98 ab       	std	Y+48, r25	; 0x30
    2b1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b22:	98 a9       	ldd	r25, Y+48	; 0x30
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <SIM_SendSMS+0x362>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <SIM_SendSMS+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b30:	9c a9       	ldd	r25, Y+52	; 0x34
    2b32:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	9c a7       	std	Y+44, r25	; 0x2c
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <SIM_SendSMS+0x3aa>
    2b4e:	9c a7       	std	Y+44, r25	; 0x2c
    2b50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	SIM_voidSendCommand("\"\r");
    2b52:	8e e3       	ldi	r24, 0x3E	; 62
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    2b5a:	8a e0       	ldi	r24, 0x0A	; 10
    2b5c:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a8 ec       	ldi	r26, 0xC8	; 200
    2b66:	b2 e4       	ldi	r27, 0x42	; 66
    2b68:	8f a3       	std	Y+39, r24	; 0x27
    2b6a:	98 a7       	std	Y+40, r25	; 0x28
    2b6c:	a9 a7       	std	Y+41, r26	; 0x29
    2b6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	6f a1       	ldd	r22, Y+39	; 0x27
    2b72:	78 a5       	ldd	r23, Y+40	; 0x28
    2b74:	89 a5       	ldd	r24, Y+41	; 0x29
    2b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4a e7       	ldi	r20, 0x7A	; 122
    2b7e:	55 e4       	ldi	r21, 0x45	; 69
    2b80:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8b a3       	std	Y+35, r24	; 0x23
    2b8a:	9c a3       	std	Y+36, r25	; 0x24
    2b8c:	ad a3       	std	Y+37, r26	; 0x25
    2b8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b90:	6b a1       	ldd	r22, Y+35	; 0x23
    2b92:	7c a1       	ldd	r23, Y+36	; 0x24
    2b94:	8d a1       	ldd	r24, Y+37	; 0x25
    2b96:	9e a1       	ldd	r25, Y+38	; 0x26
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <SIM_SendSMS+0x412>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <SIM_SendSMS+0x490>
	else if (__tmp > 65535)
    2bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	4c f5       	brge	.+82     	; 0x2c1c <SIM_SendSMS+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bca:	6f a1       	ldd	r22, Y+39	; 0x27
    2bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bce:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9a a3       	std	Y+34, r25	; 0x22
    2bf0:	89 a3       	std	Y+33, r24	; 0x21
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <SIM_SendSMS+0x472>
    2bf4:	80 e9       	ldi	r24, 0x90	; 144
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	98 a3       	std	Y+32, r25	; 0x20
    2bfa:	8f 8f       	std	Y+31, r24	; 0x1f
    2bfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfe:	98 a1       	ldd	r25, Y+32	; 0x20
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <SIM_SendSMS+0x460>
    2c04:	98 a3       	std	Y+32, r25	; 0x20
    2c06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	89 a1       	ldd	r24, Y+33	; 0x21
    2c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9a a3       	std	Y+34, r25	; 0x22
    2c10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	89 a1       	ldd	r24, Y+33	; 0x21
    2c14:	9a a1       	ldd	r25, Y+34	; 0x22
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	69 f7       	brne	.-38     	; 0x2bf4 <SIM_SendSMS+0x454>
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <SIM_SendSMS+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c20:	8d a1       	ldd	r24, Y+37	; 0x25
    2c22:	9e a1       	ldd	r25, Y+38	; 0x26
    2c24:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9a a3       	std	Y+34, r25	; 0x22
    2c2e:	89 a3       	std	Y+33, r24	; 0x21
    2c30:	89 a1       	ldd	r24, Y+33	; 0x21
    2c32:	9a a1       	ldd	r25, Y+34	; 0x22
    2c34:	9e 8f       	std	Y+30, r25	; 0x1e
    2c36:	8d 8f       	std	Y+29, r24	; 0x1d
    2c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <SIM_SendSMS+0x49c>
    2c40:	9e 8f       	std	Y+30, r25	; 0x1e
    2c42:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	SIM_voidSendCommand(Copy_u8SMS);
    2c44:	fe 01       	movw	r30, r28
    2c46:	e9 5a       	subi	r30, 0xA9	; 169
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    2c52:	8a e0       	ldi	r24, 0x0A	; 10
    2c54:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c5e:	b2 e4       	ldi	r27, 0x42	; 66
    2c60:	89 8f       	std	Y+25, r24	; 0x19
    2c62:	9a 8f       	std	Y+26, r25	; 0x1a
    2c64:	ab 8f       	std	Y+27, r26	; 0x1b
    2c66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c68:	69 8d       	ldd	r22, Y+25	; 0x19
    2c6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a e7       	ldi	r20, 0x7A	; 122
    2c76:	55 e4       	ldi	r21, 0x45	; 69
    2c78:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8d 8b       	std	Y+21, r24	; 0x15
    2c82:	9e 8b       	std	Y+22, r25	; 0x16
    2c84:	af 8b       	std	Y+23, r26	; 0x17
    2c86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <SIM_SendSMS+0x50a>
		__ticks = 1;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9c 8b       	std	Y+20, r25	; 0x14
    2ca6:	8b 8b       	std	Y+19, r24	; 0x13
    2ca8:	3f c0       	rjmp	.+126    	; 0x2d28 <SIM_SendSMS+0x588>
	else if (__tmp > 65535)
    2caa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cac:	7e 89       	ldd	r23, Y+22	; 0x16
    2cae:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	4c f5       	brge	.+82     	; 0x2d14 <SIM_SendSMS+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <SIM_SendSMS+0x56a>
    2cec:	80 e9       	ldi	r24, 0x90	; 144
    2cee:	91 e0       	ldi	r25, 0x01	; 1
    2cf0:	9a 8b       	std	Y+18, r25	; 0x12
    2cf2:	89 8b       	std	Y+17, r24	; 0x11
    2cf4:	89 89       	ldd	r24, Y+17	; 0x11
    2cf6:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <SIM_SendSMS+0x558>
    2cfc:	9a 8b       	std	Y+18, r25	; 0x12
    2cfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	8b 89       	ldd	r24, Y+19	; 0x13
    2d02:	9c 89       	ldd	r25, Y+20	; 0x14
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	69 f7       	brne	.-38     	; 0x2cec <SIM_SendSMS+0x54c>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <SIM_SendSMS+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	6d 89       	ldd	r22, Y+21	; 0x15
    2d16:	7e 89       	ldd	r23, Y+22	; 0x16
    2d18:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9c 8b       	std	Y+20, r25	; 0x14
    2d26:	8b 8b       	std	Y+19, r24	; 0x13
    2d28:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2c:	98 8b       	std	Y+16, r25	; 0x10
    2d2e:	8f 87       	std	Y+15, r24	; 0x0f
    2d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d32:	98 89       	ldd	r25, Y+16	; 0x10
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <SIM_SendSMS+0x594>
    2d38:	98 8b       	std	Y+16, r25	; 0x10
    2d3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	SIM_voidSendCommand("\r");
    2d3c:	81 e4       	ldi	r24, 0x41	; 65
    2d3e:	91 e0       	ldi	r25, 0x01	; 1
    2d40:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    2d44:	8a e0       	ldi	r24, 0x0A	; 10
    2d46:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByteSynch>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d50:	b2 e4       	ldi	r27, 0x42	; 66
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a e7       	ldi	r20, 0x7A	; 122
    2d68:	55 e4       	ldi	r21, 0x45	; 69
    2d6a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <SIM_SendSMS+0x5fc>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <SIM_SendSMS+0x67a>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <SIM_SendSMS+0x666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <SIM_SendSMS+0x65c>
    2dde:	80 e9       	ldi	r24, 0x90	; 144
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <SIM_SendSMS+0x64a>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <SIM_SendSMS+0x63e>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <SIM_SendSMS+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <SIM_SendSMS+0x686>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    2e2e:	c8 5a       	subi	r28, 0xA8	; 168
    2e30:	df 4f       	sbci	r29, 0xFF	; 255
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	08 95       	ret

00002e46 <SIM_MakeCall>:

void SIM_MakeCall(u8 *Copy_u8PhoneNumber)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <SIM_MakeCall+0x6>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
	SIM_voidSendCommand("ATD");
    2e54:	8a ea       	ldi	r24, 0xAA	; 170
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	//_delay_ms(10);
	SIM_voidSendCommand(Copy_u8PhoneNumber);
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
	//_delay_ms(10);
	SIM_voidSendCommand(";\r\n");
    2e64:	8e ea       	ldi	r24, 0xAE	; 174
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SIM_voidSendCommand>
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <LCD_Init>:
#include "TopWayLCD_Interface.h"
#include "avr/delay.h"


void LCD_Init()
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit();
    2e7e:	0e 94 a0 19 	call	0x3340	; 0x3340 <UART_voidInit>
}
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <LCD_SendNum16>:

void LCD_SendNum16(u32 Copy_u32Address , u16 Copy_u16Num)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	2c 97       	sbiw	r28, 0x0c	; 12
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	6f 83       	std	Y+7, r22	; 0x07
    2e9e:	78 87       	std	Y+8, r23	; 0x08
    2ea0:	89 87       	std	Y+9, r24	; 0x09
    2ea2:	9a 87       	std	Y+10, r25	; 0x0a
    2ea4:	5c 87       	std	Y+12, r21	; 0x0c
    2ea6:	4b 87       	std	Y+11, r20	; 0x0b
	u8 add_B1 = (u8)Copy_u32Address;
    2ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    2eac:	8f 81       	ldd	r24, Y+7	; 0x07
    2eae:	98 85       	ldd	r25, Y+8	; 0x08
    2eb0:	a9 85       	ldd	r26, Y+9	; 0x09
    2eb2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2eb4:	89 2f       	mov	r24, r25
    2eb6:	9a 2f       	mov	r25, r26
    2eb8:	ab 2f       	mov	r26, r27
    2eba:	bb 27       	eor	r27, r27
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    2ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec0:	98 85       	ldd	r25, Y+8	; 0x08
    2ec2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ec4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	aa 27       	eor	r26, r26
    2eca:	bb 27       	eor	r27, r27
    2ecc:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	98 85       	ldd	r25, Y+8	; 0x08
    2ed2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ed4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ed6:	8b 2f       	mov	r24, r27
    2ed8:	99 27       	eor	r25, r25
    2eda:	aa 27       	eor	r26, r26
    2edc:	bb 27       	eor	r27, r27
    2ede:	8b 83       	std	Y+3, r24	; 0x03

	u8 data_B1 = (u8)Copy_u16Num;
    2ee0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee2:	8a 83       	std	Y+2, r24	; 0x02
	u8 data_B2 = (u8)(Copy_u16Num >> 8);
    2ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee8:	89 2f       	mov	r24, r25
    2eea:	99 27       	eor	r25, r25
    2eec:	89 83       	std	Y+1, r24	; 0x01

	 UART_voidWriteData(0xaa);
    2eee:	8a ea       	ldi	r24, 0xAA	; 170
    2ef0:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x3d);
    2ef4:	8d e3       	ldi	r24, 0x3D	; 61
    2ef6:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B4);
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B3);
    2f00:	8c 81       	ldd	r24, Y+4	; 0x04
    2f02:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B2);
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B1);
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(data_B2);
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(data_B1);
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0xcc);
    2f1e:	8c ec       	ldi	r24, 0xCC	; 204
    2f20:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x33);
    2f24:	83 e3       	ldi	r24, 0x33	; 51
    2f26:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0xc3);
    2f2a:	83 ec       	ldi	r24, 0xC3	; 195
    2f2c:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x3c);
    2f30:	8c e3       	ldi	r24, 0x3C	; 60
    2f32:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
}
    2f36:	2c 96       	adiw	r28, 0x0c	; 12
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <LCD_GetNum16>:

u16 LCD_GetNum16(u32 Copy_u32Address)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	2a 97       	sbiw	r28, 0x0a	; 10
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	6f 83       	std	Y+7, r22	; 0x07
    2f5e:	78 87       	std	Y+8, r23	; 0x08
    2f60:	89 87       	std	Y+9, r24	; 0x09
    2f62:	9a 87       	std	Y+10, r25	; 0x0a
	u8 add_B1 = (u8)Copy_u32Address;
    2f64:	8f 81       	ldd	r24, Y+7	; 0x07
    2f66:	8e 83       	std	Y+6, r24	; 0x06
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    2f68:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6a:	98 85       	ldd	r25, Y+8	; 0x08
    2f6c:	a9 85       	ldd	r26, Y+9	; 0x09
    2f6e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f70:	89 2f       	mov	r24, r25
    2f72:	9a 2f       	mov	r25, r26
    2f74:	ab 2f       	mov	r26, r27
    2f76:	bb 27       	eor	r27, r27
    2f78:	8d 83       	std	Y+5, r24	; 0x05
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    2f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7c:	98 85       	ldd	r25, Y+8	; 0x08
    2f7e:	a9 85       	ldd	r26, Y+9	; 0x09
    2f80:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f82:	cd 01       	movw	r24, r26
    2f84:	aa 27       	eor	r26, r26
    2f86:	bb 27       	eor	r27, r27
    2f88:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    2f8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f8c:	98 85       	ldd	r25, Y+8	; 0x08
    2f8e:	a9 85       	ldd	r26, Y+9	; 0x09
    2f90:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f92:	8b 2f       	mov	r24, r27
    2f94:	99 27       	eor	r25, r25
    2f96:	aa 27       	eor	r26, r26
    2f98:	bb 27       	eor	r27, r27
    2f9a:	8b 83       	std	Y+3, r24	; 0x03

	u16 data = 0;
    2f9c:	1a 82       	std	Y+2, r1	; 0x02
    2f9e:	19 82       	std	Y+1, r1	; 0x01

	UART_voidWriteData(0xaa);
    2fa0:	8a ea       	ldi	r24, 0xAA	; 170
    2fa2:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x3e);
    2fa6:	8e e3       	ldi	r24, 0x3E	; 62
    2fa8:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B4);
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B3);
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B2);
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B1);
    2fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc0:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0xcc);
    2fc4:	8c ec       	ldi	r24, 0xCC	; 204
    2fc6:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x33);
    2fca:	83 e3       	ldi	r24, 0x33	; 51
    2fcc:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0xc3);
    2fd0:	83 ec       	ldi	r24, 0xC3	; 195
    2fd2:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x3c);
    2fd6:	8c e3       	ldi	r24, 0x3C	; 60
    2fd8:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>

	while(UART_u8ReadData() != 0xaa){}
    2fdc:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    2fe0:	8a 3a       	cpi	r24, 0xAA	; 170
    2fe2:	e1 f7       	brne	.-8      	; 0x2fdc <LCD_GetNum16+0x94>
	while(UART_u8ReadData() != 0x3e){}
    2fe4:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    2fe8:	8e 33       	cpi	r24, 0x3E	; 62
    2fea:	e1 f7       	brne	.-8      	; 0x2fe4 <LCD_GetNum16+0x9c>

	data = UART_u8ReadData();
    2fec:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9a 83       	std	Y+2, r25	; 0x02
    2ff6:	89 83       	std	Y+1, r24	; 0x01
	data = data << 8;
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	98 2f       	mov	r25, r24
    2ffe:	88 27       	eor	r24, r24
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
	data = UART_u8ReadData();
    3004:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01

	while(UART_u8ReadData()!=0xcc){}
    3010:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    3014:	8c 3c       	cpi	r24, 0xCC	; 204
    3016:	e1 f7       	brne	.-8      	; 0x3010 <LCD_GetNum16+0xc8>
	while(UART_u8ReadData()!=0x33){}
    3018:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    301c:	83 33       	cpi	r24, 0x33	; 51
    301e:	e1 f7       	brne	.-8      	; 0x3018 <LCD_GetNum16+0xd0>
	while(UART_u8ReadData()!=0xc3){}
    3020:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    3024:	83 3c       	cpi	r24, 0xC3	; 195
    3026:	e1 f7       	brne	.-8      	; 0x3020 <LCD_GetNum16+0xd8>
	while(UART_u8ReadData()!=0x3c){}
    3028:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    302c:	8c 33       	cpi	r24, 0x3C	; 60
    302e:	e1 f7       	brne	.-8      	; 0x3028 <LCD_GetNum16+0xe0>

	return data;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3034:	2a 96       	adiw	r28, 0x0a	; 10
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <LCD_SendString>:

void LCD_SendString(u32 Copy_u32Address , u8 *Copy_u16Str )
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	2a 97       	sbiw	r28, 0x0a	; 10
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	6d 83       	std	Y+5, r22	; 0x05
    305c:	7e 83       	std	Y+6, r23	; 0x06
    305e:	8f 83       	std	Y+7, r24	; 0x07
    3060:	98 87       	std	Y+8, r25	; 0x08
    3062:	5a 87       	std	Y+10, r21	; 0x0a
    3064:	49 87       	std	Y+9, r20	; 0x09
	u8 add_B1 = (u8)Copy_u32Address;
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	af 81       	ldd	r26, Y+7	; 0x07
    3070:	b8 85       	ldd	r27, Y+8	; 0x08
    3072:	89 2f       	mov	r24, r25
    3074:	9a 2f       	mov	r25, r26
    3076:	ab 2f       	mov	r26, r27
    3078:	bb 27       	eor	r27, r27
    307a:	8b 83       	std	Y+3, r24	; 0x03
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	af 81       	ldd	r26, Y+7	; 0x07
    3082:	b8 85       	ldd	r27, Y+8	; 0x08
    3084:	cd 01       	movw	r24, r26
    3086:	aa 27       	eor	r26, r26
    3088:	bb 27       	eor	r27, r27
    308a:	8a 83       	std	Y+2, r24	; 0x02
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    308c:	8d 81       	ldd	r24, Y+5	; 0x05
    308e:	9e 81       	ldd	r25, Y+6	; 0x06
    3090:	af 81       	ldd	r26, Y+7	; 0x07
    3092:	b8 85       	ldd	r27, Y+8	; 0x08
    3094:	8b 2f       	mov	r24, r27
    3096:	99 27       	eor	r25, r25
    3098:	aa 27       	eor	r26, r26
    309a:	bb 27       	eor	r27, r27
    309c:	89 83       	std	Y+1, r24	; 0x01

	 UART_voidWriteData(0xaa);
    309e:	8a ea       	ldi	r24, 0xAA	; 170
    30a0:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x42);
    30a4:	82 e4       	ldi	r24, 0x42	; 66
    30a6:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B4);
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B3);
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B2);
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(add_B1);
    30bc:	8c 81       	ldd	r24, Y+4	; 0x04
    30be:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteString(Copy_u16Str);
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	0e 94 ef 19 	call	0x33de	; 0x33de <UART_voidWriteString>
	 UART_voidWriteData(0xcc);
    30ca:	8c ec       	ldi	r24, 0xCC	; 204
    30cc:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x33);
    30d0:	83 e3       	ldi	r24, 0x33	; 51
    30d2:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0xc3);
    30d6:	83 ec       	ldi	r24, 0xC3	; 195
    30d8:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	 UART_voidWriteData(0x3c);
    30dc:	8c e3       	ldi	r24, 0x3C	; 60
    30de:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
}
    30e2:	2a 96       	adiw	r28, 0x0a	; 10
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <LCD_GetString>:

void LCD_GetString(u32 Copy_u32Address , u8 *Ptr_ReturnStr)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	2a 97       	sbiw	r28, 0x0a	; 10
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	6d 83       	std	Y+5, r22	; 0x05
    310a:	7e 83       	std	Y+6, r23	; 0x06
    310c:	8f 83       	std	Y+7, r24	; 0x07
    310e:	98 87       	std	Y+8, r25	; 0x08
    3110:	5a 87       	std	Y+10, r21	; 0x0a
    3112:	49 87       	std	Y+9, r20	; 0x09
	u8 add_B1 = (u8)Copy_u32Address;
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	af 81       	ldd	r26, Y+7	; 0x07
    311e:	b8 85       	ldd	r27, Y+8	; 0x08
    3120:	89 2f       	mov	r24, r25
    3122:	9a 2f       	mov	r25, r26
    3124:	ab 2f       	mov	r26, r27
    3126:	bb 27       	eor	r27, r27
    3128:	8b 83       	std	Y+3, r24	; 0x03
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	af 81       	ldd	r26, Y+7	; 0x07
    3130:	b8 85       	ldd	r27, Y+8	; 0x08
    3132:	cd 01       	movw	r24, r26
    3134:	aa 27       	eor	r26, r26
    3136:	bb 27       	eor	r27, r27
    3138:	8a 83       	std	Y+2, r24	; 0x02
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	af 81       	ldd	r26, Y+7	; 0x07
    3140:	b8 85       	ldd	r27, Y+8	; 0x08
    3142:	8b 2f       	mov	r24, r27
    3144:	99 27       	eor	r25, r25
    3146:	aa 27       	eor	r26, r26
    3148:	bb 27       	eor	r27, r27
    314a:	89 83       	std	Y+1, r24	; 0x01

	UART_voidWriteData(0xaa);
    314c:	8a ea       	ldi	r24, 0xAA	; 170
    314e:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x43);
    3152:	83 e4       	ldi	r24, 0x43	; 67
    3154:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B4);
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B3);
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B2);
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(add_B1);
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0xcc);
    3170:	8c ec       	ldi	r24, 0xCC	; 204
    3172:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x33);
    3176:	83 e3       	ldi	r24, 0x33	; 51
    3178:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0xc3);
    317c:	83 ec       	ldi	r24, 0xC3	; 195
    317e:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>
	UART_voidWriteData(0x3c);
    3182:	8c e3       	ldi	r24, 0x3C	; 60
    3184:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidWriteData>

	while(UART_u8ReadData() != 0xaa){}
    3188:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    318c:	8a 3a       	cpi	r24, 0xAA	; 170
    318e:	e1 f7       	brne	.-8      	; 0x3188 <LCD_GetString+0x94>
	while(UART_u8ReadData() != 0x43){}
    3190:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    3194:	83 34       	cpi	r24, 0x43	; 67
    3196:	e1 f7       	brne	.-8      	; 0x3190 <LCD_GetString+0x9c>

	UART_voidReadString(Ptr_ReturnStr);
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	0e 94 27 1a 	call	0x344e	; 0x344e <UART_voidReadString>

	while(UART_u8ReadData()!=0xcc){}
    31a0:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    31a4:	8c 3c       	cpi	r24, 0xCC	; 204
    31a6:	e1 f7       	brne	.-8      	; 0x31a0 <LCD_GetString+0xac>
	while(UART_u8ReadData()!=0x33){}
    31a8:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    31ac:	83 33       	cpi	r24, 0x33	; 51
    31ae:	e1 f7       	brne	.-8      	; 0x31a8 <LCD_GetString+0xb4>
	while(UART_u8ReadData()!=0xc3){}
    31b0:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    31b4:	83 3c       	cpi	r24, 0xC3	; 195
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <LCD_GetString+0xbc>
	while(UART_u8ReadData()!=0x3c){}
    31b8:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_u8ReadData>
    31bc:	8c 33       	cpi	r24, 0x3C	; 60
    31be:	e1 f7       	brne	.-8      	; 0x31b8 <LCD_GetString+0xc4>
}
    31c0:	2a 96       	adiw	r28, 0x0a	; 10
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <UART_Init>:
u8 * GlobalPtr_SendDataAsynch = NULL;

u8 * GlobalPtr_RecDataAsynch = NULL;

void UART_Init(void)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
	//select character size (8bit)
	SET_BIT(UCSRC0_REG,1);
    31da:	a5 e9       	ldi	r26, 0x95	; 149
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e5 e9       	ldi	r30, 0x95	; 149
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	82 60       	ori	r24, 0x02	; 2
    31e6:	8c 93       	st	X, r24
	SET_BIT(UCSRC0_REG,2);
    31e8:	a5 e9       	ldi	r26, 0x95	; 149
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e5 e9       	ldi	r30, 0x95	; 149
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	84 60       	ori	r24, 0x04	; 4
    31f4:	8c 93       	st	X, r24
	//Set Baud Rate to 9600
	UBRRL0_REG = 103;
    31f6:	e9 e2       	ldi	r30, 0x29	; 41
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	87 e6       	ldi	r24, 0x67	; 103
    31fc:	80 83       	st	Z, r24

	//enable for Tx Circuit
	SET_BIT(UCSRB0_REG,3);
    31fe:	aa e2       	ldi	r26, 0x2A	; 42
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	ea e2       	ldi	r30, 0x2A	; 42
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	88 60       	ori	r24, 0x08	; 8
    320a:	8c 93       	st	X, r24
	//enable for Rx Circuit
	SET_BIT(UCSRB0_REG,4);
    320c:	aa e2       	ldi	r26, 0x2A	; 42
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	ea e2       	ldi	r30, 0x2A	; 42
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	80 61       	ori	r24, 0x10	; 16
    3218:	8c 93       	st	X, r24
}
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <UART_SendByteSynch>:

void UART_SendByteSynch(u8 Data)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	0f 92       	push	r0
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	89 83       	std	Y+1, r24	; 0x01
	//wait untile UDR is Empty
	while(GET_BIT(UCSRA0_REG,5) == 0);
    322c:	eb e2       	ldi	r30, 0x2B	; 43
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	82 95       	swap	r24
    3234:	86 95       	lsr	r24
    3236:	87 70       	andi	r24, 0x07	; 7
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	81 70       	andi	r24, 0x01	; 1
    323e:	90 70       	andi	r25, 0x00	; 0
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	a1 f3       	breq	.-24     	; 0x322c <UART_SendByteSynch+0xc>
	//put data in UDR
	UDR0_REG = Data;
    3244:	ec e2       	ldi	r30, 0x2C	; 44
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	80 83       	st	Z, r24
	//wait until transmitting is complete
	while(GET_BIT(UCSRA0_REG,6) == 0);
    324c:	eb e2       	ldi	r30, 0x2B	; 43
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	82 95       	swap	r24
    3254:	86 95       	lsr	r24
    3256:	86 95       	lsr	r24
    3258:	83 70       	andi	r24, 0x03	; 3
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	81 70       	andi	r24, 0x01	; 1
    3260:	90 70       	andi	r25, 0x00	; 0
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	99 f3       	breq	.-26     	; 0x324c <UART_SendByteSynch+0x2c>
}
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <UART_SendByteASynch>:

void UART_SendByteASynch(u8 * Data)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <UART_SendByteASynch+0x6>
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
	GlobalPtr_SendDataAsynch = Data;
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	90 93 db 03 	sts	0x03DB, r25
    3284:	80 93 da 03 	sts	0x03DA, r24
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <UART_ReceiveByteSynch>:

u8 UART_ReceiveByteSynch()
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
	//wait until receive is complete
	while(GET_BIT(UCSRA0_REG,7) == 0);
    329a:	eb e2       	ldi	r30, 0x2B	; 43
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	88 23       	and	r24, r24
    32a2:	dc f7       	brge	.-10     	; 0x329a <UART_ReceiveByteSynch+0x8>

	//return Data
	return UDR0_REG;
    32a4:	ec e2       	ldi	r30, 0x2C	; 44
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
}
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <UART_ReceiveByteASynch>:

void UART_ReceiveByteASynch(u8 * Data)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <UART_ReceiveByteASynch+0x6>
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
	Data = GlobalPtr_RecDataAsynch;
    32be:	80 91 dc 03 	lds	r24, 0x03DC
    32c2:	90 91 dd 03 	lds	r25, 0x03DD
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
}
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <UART_SendStringSync>:

void UART_SendStringSync(u8 const* Copy_pu8Data )
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <UART_SendStringSync+0x6>
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	24 c0       	rjmp	.+72     	; 0x332c <UART_SendStringSync+0x58>
	while( *Copy_pu8Data != '\0')
	{
		while(GET_BIT(UCSRA0_REG,5) == 0);
    32e4:	eb e2       	ldi	r30, 0x2B	; 43
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	82 95       	swap	r24
    32ec:	86 95       	lsr	r24
    32ee:	87 70       	andi	r24, 0x07	; 7
    32f0:	88 2f       	mov	r24, r24
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	81 70       	andi	r24, 0x01	; 1
    32f6:	90 70       	andi	r25, 0x00	; 0
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	a1 f3       	breq	.-24     	; 0x32e4 <UART_SendStringSync+0x10>

		UDR0_REG = *Copy_pu8Data ;
    32fc:	ec e2       	ldi	r30, 0x2C	; 44
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	a9 81       	ldd	r26, Y+1	; 0x01
    3302:	ba 81       	ldd	r27, Y+2	; 0x02
    3304:	8c 91       	ld	r24, X
    3306:	80 83       	st	Z, r24

		while(GET_BIT(UCSRA0_REG,6) == 0);
    3308:	eb e2       	ldi	r30, 0x2B	; 43
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	82 95       	swap	r24
    3310:	86 95       	lsr	r24
    3312:	86 95       	lsr	r24
    3314:	83 70       	andi	r24, 0x03	; 3
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	81 70       	andi	r24, 0x01	; 1
    331c:	90 70       	andi	r25, 0x00	; 0
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	99 f3       	breq	.-26     	; 0x3308 <UART_SendStringSync+0x34>

		Copy_pu8Data++ ;
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01
	Data = GlobalPtr_RecDataAsynch;
}

void UART_SendStringSync(u8 const* Copy_pu8Data )
{
	while( *Copy_pu8Data != '\0')
    332c:	e9 81       	ldd	r30, Y+1	; 0x01
    332e:	fa 81       	ldd	r31, Y+2	; 0x02
    3330:	80 81       	ld	r24, Z
    3332:	88 23       	and	r24, r24
    3334:	b9 f6       	brne	.-82     	; 0x32e4 <UART_SendStringSync+0x10>

		while(GET_BIT(UCSRA0_REG,6) == 0);

		Copy_pu8Data++ ;
	}
}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <UART_voidInit>:

void UART_voidInit()
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
	/*Select character size it is 2 in mode*/
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
    3348:	aa e9       	ldi	r26, 0x9A	; 154
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	ea e9       	ldi	r30, 0x9A	; 154
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	8b 7f       	andi	r24, 0xFB	; 251
    3354:	8c 93       	st	X, r24
	/*Select UCSRC register - Asynchronous mode -no parity - 1 stop bit - 8 bit character - no polarity */
	UCSRC = 0b00000110;
    3356:	ed e9       	ldi	r30, 0x9D	; 157
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	86 e0       	ldi	r24, 0x06	; 6
    335c:	80 83       	st	Z, r24
	/*Set the baudRate 115.2K bps*/
	UBBRL = 8;
    335e:	e9 e9       	ldi	r30, 0x99	; 153
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	88 e0       	ldi	r24, 0x08	; 8
    3364:	80 83       	st	Z, r24
	/*Enable the RX and TX */
	SET_BIT(UCSRB , UCSRB_RXEN);
    3366:	aa e9       	ldi	r26, 0x9A	; 154
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	ea e9       	ldi	r30, 0x9A	; 154
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	80 61       	ori	r24, 0x10	; 16
    3372:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    3374:	aa e9       	ldi	r26, 0x9A	; 154
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	ea e9       	ldi	r30, 0x9A	; 154
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	88 60       	ori	r24, 0x08	; 8
    3380:	8c 93       	st	X, r24
}
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <UART_voidWriteData>:
void UART_voidWriteData(u8 Copy_u8Data)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	89 83       	std	Y+1, r24	; 0x01
	/*wait until the transmit buffer empty and ready*/
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    3394:	eb e9       	ldi	r30, 0x9B	; 155
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	82 95       	swap	r24
    339c:	86 95       	lsr	r24
    339e:	87 70       	andi	r24, 0x07	; 7
    33a0:	88 2f       	mov	r24, r24
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	81 70       	andi	r24, 0x01	; 1
    33a6:	90 70       	andi	r25, 0x00	; 0
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	a1 f3       	breq	.-24     	; 0x3394 <UART_voidWriteData+0xc>
	UDR = Copy_u8Data;
    33ac:	ec e9       	ldi	r30, 0x9C	; 156
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	80 83       	st	Z, r24
}
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <UART_u8ReadData>:
u8 UART_u8ReadData()
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	0f 92       	push	r0
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
	u8 data;

	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    33c6:	eb e9       	ldi	r30, 0x9B	; 155
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	88 23       	and	r24, r24
    33ce:	dc f7       	brge	.-10     	; 0x33c6 <UART_u8ReadData+0xa>

	return UDR;
    33d0:	ec e9       	ldi	r30, 0x9C	; 156
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
}
    33d6:	0f 90       	pop	r0
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <UART_voidWriteString>:

void UART_voidWriteString(u8 *Copy_u8Data)
{
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <UART_voidWriteString+0x6>
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	89 83       	std	Y+1, r24	; 0x01
    33ec:	17 c0       	rjmp	.+46     	; 0x341c <UART_voidWriteString+0x3e>
	while( *Copy_u8Data != '\0')
	{
		while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    33ee:	eb e9       	ldi	r30, 0x9B	; 155
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	82 95       	swap	r24
    33f6:	86 95       	lsr	r24
    33f8:	87 70       	andi	r24, 0x07	; 7
    33fa:	88 2f       	mov	r24, r24
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	81 70       	andi	r24, 0x01	; 1
    3400:	90 70       	andi	r25, 0x00	; 0
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	a1 f3       	breq	.-24     	; 0x33ee <UART_voidWriteString+0x10>

		UDR = *Copy_u8Data;
    3406:	ac e9       	ldi	r26, 0x9C	; 156
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e9 81       	ldd	r30, Y+1	; 0x01
    340c:	fa 81       	ldd	r31, Y+2	; 0x02
    340e:	80 81       	ld	r24, Z
    3410:	8c 93       	st	X, r24

		Copy_u8Data++;
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	9a 81       	ldd	r25, Y+2	; 0x02
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_voidWriteString(u8 *Copy_u8Data)
{
	while( *Copy_u8Data != '\0')
    341c:	e9 81       	ldd	r30, Y+1	; 0x01
    341e:	fa 81       	ldd	r31, Y+2	; 0x02
    3420:	80 81       	ld	r24, Z
    3422:	88 23       	and	r24, r24
    3424:	21 f7       	brne	.-56     	; 0x33ee <UART_voidWriteString+0x10>

		UDR = *Copy_u8Data;

		Copy_u8Data++;
	}
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    3426:	eb e9       	ldi	r30, 0x9B	; 155
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	82 95       	swap	r24
    342e:	86 95       	lsr	r24
    3430:	87 70       	andi	r24, 0x07	; 7
    3432:	88 2f       	mov	r24, r24
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	81 70       	andi	r24, 0x01	; 1
    3438:	90 70       	andi	r25, 0x00	; 0
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	a1 f3       	breq	.-24     	; 0x3426 <UART_voidWriteString+0x48>

	UDR = 0x00;
    343e:	ec e9       	ldi	r30, 0x9C	; 156
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	10 82       	st	Z, r1

}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <UART_voidReadString>:

void UART_voidReadString(u8 *Ptr_ReturnStr)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	00 d0       	rcall	.+0      	; 0x3454 <UART_voidReadString+0x6>
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    345c:	eb e9       	ldi	r30, 0x9B	; 155
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	88 23       	and	r24, r24
    3464:	dc f7       	brge	.-10     	; 0x345c <UART_voidReadString+0xe>
	*Ptr_ReturnStr = UDR;
    3466:	ec e9       	ldi	r30, 0x9C	; 156
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	e9 81       	ldd	r30, Y+1	; 0x01
    346e:	fa 81       	ldd	r31, Y+2	; 0x02
    3470:	80 83       	st	Z, r24
    3472:	10 c0       	rjmp	.+32     	; 0x3494 <UART_voidReadString+0x46>

	while(*Ptr_ReturnStr != '\0')
	{
		while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    3474:	eb e9       	ldi	r30, 0x9B	; 155
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	88 23       	and	r24, r24
    347c:	dc f7       	brge	.-10     	; 0x3474 <UART_voidReadString+0x26>
		*(++Ptr_ReturnStr) = UDR;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	ec e9       	ldi	r30, 0x9C	; 156
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	e9 81       	ldd	r30, Y+1	; 0x01
    3490:	fa 81       	ldd	r31, Y+2	; 0x02
    3492:	80 83       	st	Z, r24
void UART_voidReadString(u8 *Ptr_ReturnStr)
{
	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
	*Ptr_ReturnStr = UDR;

	while(*Ptr_ReturnStr != '\0')
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	80 81       	ld	r24, Z
    349a:	88 23       	and	r24, r24
    349c:	59 f7       	brne	.-42     	; 0x3474 <UART_voidReadString+0x26>
	{
		while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
		*(++Ptr_ReturnStr) = UDR;
	}
}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <UART_voidDisable>:

void UART_voidDisable()
{
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
    34b0:	aa e9       	ldi	r26, 0x9A	; 154
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	ea e9       	ldi	r30, 0x9A	; 154
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	8f 7e       	andi	r24, 0xEF	; 239
    34bc:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,3);
    34be:	aa e9       	ldi	r26, 0x9A	; 154
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	ea e9       	ldi	r30, 0x9A	; 154
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	87 7f       	andi	r24, 0xF7	; 247
    34ca:	8c 93       	st	X, r24
}
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <main>:
#include "PhoneList.h"
#include "TopWayLCD_Interface.h"
#include "avr/delay.h"

int main(void)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	2a 97       	sbiw	r28, 0x0a	; 10
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
	 UART_Init();
    34e6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_Init>
	 LCD_Init();
    34ea:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_Init>
	 u8 Num_size = 0;
    34ee:	1a 86       	std	Y+10, r1	; 0x0a
	 u8 *valid = "Valid Number";
    34f0:	82 eb       	ldi	r24, 0xB2	; 178
    34f2:	91 e0       	ldi	r25, 0x01	; 1
    34f4:	99 87       	std	Y+9, r25	; 0x09
    34f6:	88 87       	std	Y+8, r24	; 0x08
	 u8 *Invalid = "InValid Number";
    34f8:	8f eb       	ldi	r24, 0xBF	; 191
    34fa:	91 e0       	ldi	r25, 0x01	; 1
    34fc:	9f 83       	std	Y+7, r25	; 0x07
    34fe:	8e 83       	std	Y+6, r24	; 0x06
	 u8 *ptr = "";
    3500:	8e ec       	ldi	r24, 0xCE	; 206
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	9d 83       	std	Y+5, r25	; 0x05
    3506:	8c 83       	std	Y+4, r24	; 0x04

	 while(1)
	 {
		 Num_size=0;
    3508:	1a 86       	std	Y+10, r1	; 0x0a
		for(u8 i=0; i<=200; i++)
    350a:	19 82       	std	Y+1, r1	; 0x01
    350c:	1c c0       	rjmp	.+56     	; 0x3546 <main+0x74>
		{
			LCD_SendNum16(0x00080000,i);
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	28 2f       	mov	r18, r24
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	88 e0       	ldi	r24, 0x08	; 8
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	a9 01       	movw	r20, r18
    351e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_SendNum16>
			LCD_SendNum16(0x00080002,200-i);
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	88 ec       	ldi	r24, 0xC8	; 200
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	82 1b       	sub	r24, r18
    352e:	93 0b       	sbc	r25, r19
    3530:	9c 01       	movw	r18, r24
    3532:	62 e0       	ldi	r22, 0x02	; 2
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	88 e0       	ldi	r24, 0x08	; 8
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a9 01       	movw	r20, r18
    353c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_SendNum16>
	 u8 *ptr = "";

	 while(1)
	 {
		 Num_size=0;
		for(u8 i=0; i<=200; i++)
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	89 3c       	cpi	r24, 0xC9	; 201
    354a:	08 f3       	brcs	.-62     	; 0x350e <main+0x3c>
		{
			LCD_SendNum16(0x00080000,i);
			LCD_SendNum16(0x00080002,200-i);
		}

		u8* data = "";
    354c:	8e ec       	ldi	r24, 0xCE	; 206
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	9b 83       	std	Y+3, r25	; 0x03
    3552:	8a 83       	std	Y+2, r24	; 0x02
		LCD_GetString(0x00000080,data);
    3554:	2a 81       	ldd	r18, Y+2	; 0x02
    3556:	3b 81       	ldd	r19, Y+3	; 0x03
    3558:	60 e8       	ldi	r22, 0x80	; 128
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	a9 01       	movw	r20, r18
    3562:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_GetString>
		ptr = data;
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	9b 81       	ldd	r25, Y+3	; 0x03
    356a:	9d 83       	std	Y+5, r25	; 0x05
    356c:	8c 83       	std	Y+4, r24	; 0x04
		if(data[0] == '0' && data[1] == '1')
    356e:	ea 81       	ldd	r30, Y+2	; 0x02
    3570:	fb 81       	ldd	r31, Y+3	; 0x03
    3572:	80 81       	ld	r24, Z
    3574:	80 33       	cpi	r24, 0x30	; 48
    3576:	09 f0       	breq	.+2      	; 0x357a <main+0xa8>
    3578:	43 c0       	rjmp	.+134    	; 0x3600 <main+0x12e>
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	fc 01       	movw	r30, r24
    3580:	31 96       	adiw	r30, 0x01	; 1
    3582:	80 81       	ld	r24, Z
    3584:	81 33       	cpi	r24, 0x31	; 49
    3586:	e1 f5       	brne	.+120    	; 0x3600 <main+0x12e>
    3588:	08 c0       	rjmp	.+16     	; 0x359a <main+0xc8>
		{
			while(*data != '\0')
			{
				Num_size++;
    358a:	8a 85       	ldd	r24, Y+10	; 0x0a
    358c:	8f 5f       	subi	r24, 0xFF	; 255
    358e:	8a 87       	std	Y+10, r24	; 0x0a
				data++;
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	9b 81       	ldd	r25, Y+3	; 0x03
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	9b 83       	std	Y+3, r25	; 0x03
    3598:	8a 83       	std	Y+2, r24	; 0x02
		u8* data = "";
		LCD_GetString(0x00000080,data);
		ptr = data;
		if(data[0] == '0' && data[1] == '1')
		{
			while(*data != '\0')
    359a:	ea 81       	ldd	r30, Y+2	; 0x02
    359c:	fb 81       	ldd	r31, Y+3	; 0x03
    359e:	80 81       	ld	r24, Z
    35a0:	88 23       	and	r24, r24
    35a2:	99 f7       	brne	.-26     	; 0x358a <main+0xb8>
			{
				Num_size++;
				data++;
			}
			if(Num_size == 11)
    35a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a6:	8b 30       	cpi	r24, 0x0B	; 11
    35a8:	09 f5       	brne	.+66     	; 0x35ec <main+0x11a>
			{
				LCD_SendNum16(0x00080004,Num_size);
    35aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	64 e0       	ldi	r22, 0x04	; 4
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	88 e0       	ldi	r24, 0x08	; 8
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a9 01       	movw	r20, r18
    35ba:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_SendNum16>
				LCD_SendString(0x00000100,valid);
    35be:	28 85       	ldd	r18, Y+8	; 0x08
    35c0:	39 85       	ldd	r19, Y+9	; 0x09
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	71 e0       	ldi	r23, 0x01	; 1
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a9 01       	movw	r20, r18
    35cc:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_SendString>

				Add_to_eeprom(ptr);
    35d0:	8c 81       	ldd	r24, Y+4	; 0x04
    35d2:	9d 81       	ldd	r25, Y+5	; 0x05
    35d4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Add_to_eeprom>
//				print_numbers();
//				UART_SendStringSync(ptr);
				//u8 * mesg = "Hello CodeCrafters";
				//UART_voidDisable();
				//SIM_SendSMS(ptr,"Hello CodeCrafters");
				LCD_SendString(0x00000080,"\0");
    35d8:	2f ec       	ldi	r18, 0xCF	; 207
    35da:	31 e0       	ldi	r19, 0x01	; 1
    35dc:	60 e8       	ldi	r22, 0x80	; 128
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a9 01       	movw	r20, r18
    35e6:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_SendString>
    35ea:	8e cf       	rjmp	.-228    	; 0x3508 <main+0x36>
			}
			else
			{
				LCD_SendString(0x00000100,Invalid);
    35ec:	2e 81       	ldd	r18, Y+6	; 0x06
    35ee:	3f 81       	ldd	r19, Y+7	; 0x07
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	71 e0       	ldi	r23, 0x01	; 1
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a9 01       	movw	r20, r18
    35fa:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_SendString>
    35fe:	84 cf       	rjmp	.-248    	; 0x3508 <main+0x36>
			}

		}
		else
		{
			LCD_SendString(0x00000100,Invalid);
    3600:	2e 81       	ldd	r18, Y+6	; 0x06
    3602:	3f 81       	ldd	r19, Y+7	; 0x07
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	71 e0       	ldi	r23, 0x01	; 1
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a9 01       	movw	r20, r18
    360e:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_SendString>
    3612:	7a cf       	rjmp	.-268    	; 0x3508 <main+0x36>

00003614 <__prologue_saves__>:
    3614:	2f 92       	push	r2
    3616:	3f 92       	push	r3
    3618:	4f 92       	push	r4
    361a:	5f 92       	push	r5
    361c:	6f 92       	push	r6
    361e:	7f 92       	push	r7
    3620:	8f 92       	push	r8
    3622:	9f 92       	push	r9
    3624:	af 92       	push	r10
    3626:	bf 92       	push	r11
    3628:	cf 92       	push	r12
    362a:	df 92       	push	r13
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	ca 1b       	sub	r28, r26
    363e:	db 0b       	sbc	r29, r27
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	09 94       	ijmp

0000364c <__epilogue_restores__>:
    364c:	2a 88       	ldd	r2, Y+18	; 0x12
    364e:	39 88       	ldd	r3, Y+17	; 0x11
    3650:	48 88       	ldd	r4, Y+16	; 0x10
    3652:	5f 84       	ldd	r5, Y+15	; 0x0f
    3654:	6e 84       	ldd	r6, Y+14	; 0x0e
    3656:	7d 84       	ldd	r7, Y+13	; 0x0d
    3658:	8c 84       	ldd	r8, Y+12	; 0x0c
    365a:	9b 84       	ldd	r9, Y+11	; 0x0b
    365c:	aa 84       	ldd	r10, Y+10	; 0x0a
    365e:	b9 84       	ldd	r11, Y+9	; 0x09
    3660:	c8 84       	ldd	r12, Y+8	; 0x08
    3662:	df 80       	ldd	r13, Y+7	; 0x07
    3664:	ee 80       	ldd	r14, Y+6	; 0x06
    3666:	fd 80       	ldd	r15, Y+5	; 0x05
    3668:	0c 81       	ldd	r16, Y+4	; 0x04
    366a:	1b 81       	ldd	r17, Y+3	; 0x03
    366c:	aa 81       	ldd	r26, Y+2	; 0x02
    366e:	b9 81       	ldd	r27, Y+1	; 0x01
    3670:	ce 0f       	add	r28, r30
    3672:	d1 1d       	adc	r29, r1
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	ed 01       	movw	r28, r26
    3680:	08 95       	ret

00003682 <malloc>:
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	bc 01       	movw	r22, r24
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	91 05       	cpc	r25, r1
    368c:	10 f4       	brcc	.+4      	; 0x3692 <malloc+0x10>
    368e:	62 e0       	ldi	r22, 0x02	; 2
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	a0 91 e2 03 	lds	r26, 0x03E2
    3696:	b0 91 e3 03 	lds	r27, 0x03E3
    369a:	ed 01       	movw	r28, r26
    369c:	e0 e0       	ldi	r30, 0x00	; 0
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	21 c0       	rjmp	.+66     	; 0x36e8 <malloc+0x66>
    36a6:	88 81       	ld	r24, Y
    36a8:	99 81       	ldd	r25, Y+1	; 0x01
    36aa:	86 17       	cp	r24, r22
    36ac:	97 07       	cpc	r25, r23
    36ae:	69 f4       	brne	.+26     	; 0x36ca <malloc+0x48>
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	9b 81       	ldd	r25, Y+3	; 0x03
    36b4:	30 97       	sbiw	r30, 0x00	; 0
    36b6:	19 f0       	breq	.+6      	; 0x36be <malloc+0x3c>
    36b8:	93 83       	std	Z+3, r25	; 0x03
    36ba:	82 83       	std	Z+2, r24	; 0x02
    36bc:	04 c0       	rjmp	.+8      	; 0x36c6 <malloc+0x44>
    36be:	90 93 e3 03 	sts	0x03E3, r25
    36c2:	80 93 e2 03 	sts	0x03E2, r24
    36c6:	fe 01       	movw	r30, r28
    36c8:	34 c0       	rjmp	.+104    	; 0x3732 <malloc+0xb0>
    36ca:	68 17       	cp	r22, r24
    36cc:	79 07       	cpc	r23, r25
    36ce:	38 f4       	brcc	.+14     	; 0x36de <malloc+0x5c>
    36d0:	41 15       	cp	r20, r1
    36d2:	51 05       	cpc	r21, r1
    36d4:	19 f0       	breq	.+6      	; 0x36dc <malloc+0x5a>
    36d6:	84 17       	cp	r24, r20
    36d8:	95 07       	cpc	r25, r21
    36da:	08 f4       	brcc	.+2      	; 0x36de <malloc+0x5c>
    36dc:	ac 01       	movw	r20, r24
    36de:	fe 01       	movw	r30, r28
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	9b 81       	ldd	r25, Y+3	; 0x03
    36e4:	9c 01       	movw	r18, r24
    36e6:	e9 01       	movw	r28, r18
    36e8:	20 97       	sbiw	r28, 0x00	; 0
    36ea:	e9 f6       	brne	.-70     	; 0x36a6 <malloc+0x24>
    36ec:	41 15       	cp	r20, r1
    36ee:	51 05       	cpc	r21, r1
    36f0:	a9 f1       	breq	.+106    	; 0x375c <malloc+0xda>
    36f2:	ca 01       	movw	r24, r20
    36f4:	86 1b       	sub	r24, r22
    36f6:	97 0b       	sbc	r25, r23
    36f8:	04 97       	sbiw	r24, 0x04	; 4
    36fa:	08 f4       	brcc	.+2      	; 0x36fe <malloc+0x7c>
    36fc:	ba 01       	movw	r22, r20
    36fe:	e0 e0       	ldi	r30, 0x00	; 0
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	2a c0       	rjmp	.+84     	; 0x3758 <malloc+0xd6>
    3704:	8d 91       	ld	r24, X+
    3706:	9c 91       	ld	r25, X
    3708:	11 97       	sbiw	r26, 0x01	; 1
    370a:	84 17       	cp	r24, r20
    370c:	95 07       	cpc	r25, r21
    370e:	f9 f4       	brne	.+62     	; 0x374e <malloc+0xcc>
    3710:	64 17       	cp	r22, r20
    3712:	75 07       	cpc	r23, r21
    3714:	81 f4       	brne	.+32     	; 0x3736 <malloc+0xb4>
    3716:	12 96       	adiw	r26, 0x02	; 2
    3718:	8d 91       	ld	r24, X+
    371a:	9c 91       	ld	r25, X
    371c:	13 97       	sbiw	r26, 0x03	; 3
    371e:	30 97       	sbiw	r30, 0x00	; 0
    3720:	19 f0       	breq	.+6      	; 0x3728 <malloc+0xa6>
    3722:	93 83       	std	Z+3, r25	; 0x03
    3724:	82 83       	std	Z+2, r24	; 0x02
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <malloc+0xae>
    3728:	90 93 e3 03 	sts	0x03E3, r25
    372c:	80 93 e2 03 	sts	0x03E2, r24
    3730:	fd 01       	movw	r30, r26
    3732:	32 96       	adiw	r30, 0x02	; 2
    3734:	4f c0       	rjmp	.+158    	; 0x37d4 <malloc+0x152>
    3736:	ca 01       	movw	r24, r20
    3738:	86 1b       	sub	r24, r22
    373a:	97 0b       	sbc	r25, r23
    373c:	fd 01       	movw	r30, r26
    373e:	e8 0f       	add	r30, r24
    3740:	f9 1f       	adc	r31, r25
    3742:	61 93       	st	Z+, r22
    3744:	71 93       	st	Z+, r23
    3746:	02 97       	sbiw	r24, 0x02	; 2
    3748:	8d 93       	st	X+, r24
    374a:	9c 93       	st	X, r25
    374c:	43 c0       	rjmp	.+134    	; 0x37d4 <malloc+0x152>
    374e:	fd 01       	movw	r30, r26
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	9c 01       	movw	r18, r24
    3756:	d9 01       	movw	r26, r18
    3758:	10 97       	sbiw	r26, 0x00	; 0
    375a:	a1 f6       	brne	.-88     	; 0x3704 <malloc+0x82>
    375c:	80 91 e0 03 	lds	r24, 0x03E0
    3760:	90 91 e1 03 	lds	r25, 0x03E1
    3764:	89 2b       	or	r24, r25
    3766:	41 f4       	brne	.+16     	; 0x3778 <malloc+0xf6>
    3768:	80 91 db 01 	lds	r24, 0x01DB
    376c:	90 91 dc 01 	lds	r25, 0x01DC
    3770:	90 93 e1 03 	sts	0x03E1, r25
    3774:	80 93 e0 03 	sts	0x03E0, r24
    3778:	40 91 dd 01 	lds	r20, 0x01DD
    377c:	50 91 de 01 	lds	r21, 0x01DE
    3780:	41 15       	cp	r20, r1
    3782:	51 05       	cpc	r21, r1
    3784:	41 f4       	brne	.+16     	; 0x3796 <malloc+0x114>
    3786:	4d b7       	in	r20, 0x3d	; 61
    3788:	5e b7       	in	r21, 0x3e	; 62
    378a:	80 91 d9 01 	lds	r24, 0x01D9
    378e:	90 91 da 01 	lds	r25, 0x01DA
    3792:	48 1b       	sub	r20, r24
    3794:	59 0b       	sbc	r21, r25
    3796:	20 91 e0 03 	lds	r18, 0x03E0
    379a:	30 91 e1 03 	lds	r19, 0x03E1
    379e:	24 17       	cp	r18, r20
    37a0:	35 07       	cpc	r19, r21
    37a2:	b0 f4       	brcc	.+44     	; 0x37d0 <malloc+0x14e>
    37a4:	ca 01       	movw	r24, r20
    37a6:	82 1b       	sub	r24, r18
    37a8:	93 0b       	sbc	r25, r19
    37aa:	86 17       	cp	r24, r22
    37ac:	97 07       	cpc	r25, r23
    37ae:	80 f0       	brcs	.+32     	; 0x37d0 <malloc+0x14e>
    37b0:	ab 01       	movw	r20, r22
    37b2:	4e 5f       	subi	r20, 0xFE	; 254
    37b4:	5f 4f       	sbci	r21, 0xFF	; 255
    37b6:	84 17       	cp	r24, r20
    37b8:	95 07       	cpc	r25, r21
    37ba:	50 f0       	brcs	.+20     	; 0x37d0 <malloc+0x14e>
    37bc:	42 0f       	add	r20, r18
    37be:	53 1f       	adc	r21, r19
    37c0:	50 93 e1 03 	sts	0x03E1, r21
    37c4:	40 93 e0 03 	sts	0x03E0, r20
    37c8:	f9 01       	movw	r30, r18
    37ca:	61 93       	st	Z+, r22
    37cc:	71 93       	st	Z+, r23
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <malloc+0x152>
    37d0:	e0 e0       	ldi	r30, 0x00	; 0
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	cf 01       	movw	r24, r30
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	08 95       	ret

000037dc <free>:
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <free+0xa>
    37e4:	50 c0       	rjmp	.+160    	; 0x3886 <free+0xaa>
    37e6:	ec 01       	movw	r28, r24
    37e8:	22 97       	sbiw	r28, 0x02	; 2
    37ea:	1b 82       	std	Y+3, r1	; 0x03
    37ec:	1a 82       	std	Y+2, r1	; 0x02
    37ee:	a0 91 e2 03 	lds	r26, 0x03E2
    37f2:	b0 91 e3 03 	lds	r27, 0x03E3
    37f6:	10 97       	sbiw	r26, 0x00	; 0
    37f8:	09 f1       	breq	.+66     	; 0x383c <free+0x60>
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	ac 17       	cp	r26, r28
    3800:	bd 07       	cpc	r27, r29
    3802:	08 f1       	brcs	.+66     	; 0x3846 <free+0x6a>
    3804:	bb 83       	std	Y+3, r27	; 0x03
    3806:	aa 83       	std	Y+2, r26	; 0x02
    3808:	fe 01       	movw	r30, r28
    380a:	21 91       	ld	r18, Z+
    380c:	31 91       	ld	r19, Z+
    380e:	e2 0f       	add	r30, r18
    3810:	f3 1f       	adc	r31, r19
    3812:	ae 17       	cp	r26, r30
    3814:	bf 07       	cpc	r27, r31
    3816:	79 f4       	brne	.+30     	; 0x3836 <free+0x5a>
    3818:	8d 91       	ld	r24, X+
    381a:	9c 91       	ld	r25, X
    381c:	11 97       	sbiw	r26, 0x01	; 1
    381e:	28 0f       	add	r18, r24
    3820:	39 1f       	adc	r19, r25
    3822:	2e 5f       	subi	r18, 0xFE	; 254
    3824:	3f 4f       	sbci	r19, 0xFF	; 255
    3826:	39 83       	std	Y+1, r19	; 0x01
    3828:	28 83       	st	Y, r18
    382a:	12 96       	adiw	r26, 0x02	; 2
    382c:	8d 91       	ld	r24, X+
    382e:	9c 91       	ld	r25, X
    3830:	13 97       	sbiw	r26, 0x03	; 3
    3832:	9b 83       	std	Y+3, r25	; 0x03
    3834:	8a 83       	std	Y+2, r24	; 0x02
    3836:	41 15       	cp	r20, r1
    3838:	51 05       	cpc	r21, r1
    383a:	71 f4       	brne	.+28     	; 0x3858 <free+0x7c>
    383c:	d0 93 e3 03 	sts	0x03E3, r29
    3840:	c0 93 e2 03 	sts	0x03E2, r28
    3844:	20 c0       	rjmp	.+64     	; 0x3886 <free+0xaa>
    3846:	12 96       	adiw	r26, 0x02	; 2
    3848:	8d 91       	ld	r24, X+
    384a:	9c 91       	ld	r25, X
    384c:	13 97       	sbiw	r26, 0x03	; 3
    384e:	ad 01       	movw	r20, r26
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	11 f0       	breq	.+4      	; 0x3858 <free+0x7c>
    3854:	dc 01       	movw	r26, r24
    3856:	d3 cf       	rjmp	.-90     	; 0x37fe <free+0x22>
    3858:	fa 01       	movw	r30, r20
    385a:	d3 83       	std	Z+3, r29	; 0x03
    385c:	c2 83       	std	Z+2, r28	; 0x02
    385e:	21 91       	ld	r18, Z+
    3860:	31 91       	ld	r19, Z+
    3862:	e2 0f       	add	r30, r18
    3864:	f3 1f       	adc	r31, r19
    3866:	ce 17       	cp	r28, r30
    3868:	df 07       	cpc	r29, r31
    386a:	69 f4       	brne	.+26     	; 0x3886 <free+0xaa>
    386c:	88 81       	ld	r24, Y
    386e:	99 81       	ldd	r25, Y+1	; 0x01
    3870:	28 0f       	add	r18, r24
    3872:	39 1f       	adc	r19, r25
    3874:	2e 5f       	subi	r18, 0xFE	; 254
    3876:	3f 4f       	sbci	r19, 0xFF	; 255
    3878:	fa 01       	movw	r30, r20
    387a:	31 83       	std	Z+1, r19	; 0x01
    387c:	20 83       	st	Z, r18
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	9b 81       	ldd	r25, Y+3	; 0x03
    3882:	93 83       	std	Z+3, r25	; 0x03
    3884:	82 83       	std	Z+2, r24	; 0x02
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	08 95       	ret

0000388c <memset>:
    388c:	dc 01       	movw	r26, r24
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <memset+0x6>
    3890:	6d 93       	st	X+, r22
    3892:	41 50       	subi	r20, 0x01	; 1
    3894:	50 40       	sbci	r21, 0x00	; 0
    3896:	e0 f7       	brcc	.-8      	; 0x3890 <memset+0x4>
    3898:	08 95       	ret

0000389a <strstr>:
    389a:	fb 01       	movw	r30, r22
    389c:	51 91       	ld	r21, Z+
    389e:	55 23       	and	r21, r21
    38a0:	a9 f0       	breq	.+42     	; 0x38cc <strstr+0x32>
    38a2:	bf 01       	movw	r22, r30
    38a4:	dc 01       	movw	r26, r24
    38a6:	4d 91       	ld	r20, X+
    38a8:	45 17       	cp	r20, r21
    38aa:	41 11       	cpse	r20, r1
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <strstr+0xc>
    38ae:	59 f4       	brne	.+22     	; 0x38c6 <strstr+0x2c>
    38b0:	cd 01       	movw	r24, r26
    38b2:	01 90       	ld	r0, Z+
    38b4:	00 20       	and	r0, r0
    38b6:	49 f0       	breq	.+18     	; 0x38ca <strstr+0x30>
    38b8:	4d 91       	ld	r20, X+
    38ba:	40 15       	cp	r20, r0
    38bc:	41 11       	cpse	r20, r1
    38be:	c9 f3       	breq	.-14     	; 0x38b2 <strstr+0x18>
    38c0:	fb 01       	movw	r30, r22
    38c2:	41 11       	cpse	r20, r1
    38c4:	ef cf       	rjmp	.-34     	; 0x38a4 <strstr+0xa>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	08 95       	ret

000038ce <__eerd_byte_m128>:
    38ce:	e1 99       	sbic	0x1c, 1	; 28
    38d0:	fe cf       	rjmp	.-4      	; 0x38ce <__eerd_byte_m128>
    38d2:	9f bb       	out	0x1f, r25	; 31
    38d4:	8e bb       	out	0x1e, r24	; 30
    38d6:	e0 9a       	sbi	0x1c, 0	; 28
    38d8:	99 27       	eor	r25, r25
    38da:	8d b3       	in	r24, 0x1d	; 29
    38dc:	08 95       	ret

000038de <__eewr_byte_m128>:
    38de:	26 2f       	mov	r18, r22

000038e0 <__eewr_r18_m128>:
    38e0:	e1 99       	sbic	0x1c, 1	; 28
    38e2:	fe cf       	rjmp	.-4      	; 0x38e0 <__eewr_r18_m128>
    38e4:	9f bb       	out	0x1f, r25	; 31
    38e6:	8e bb       	out	0x1e, r24	; 30
    38e8:	2d bb       	out	0x1d, r18	; 29
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	e2 9a       	sbi	0x1c, 2	; 28
    38f0:	e1 9a       	sbi	0x1c, 1	; 28
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	01 96       	adiw	r24, 0x01	; 1
    38f6:	08 95       	ret

000038f8 <_exit>:
    38f8:	f8 94       	cli

000038fa <__stop_program>:
    38fa:	ff cf       	rjmp	.-2      	; 0x38fa <__stop_program>
